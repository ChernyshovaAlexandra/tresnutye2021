{"ast":null,"code":"import ImageCache from './ImageCache';\n\nvar reflect = function reflect(p) {\n  return p.then(function (v) {\n    return {\n      v: v,\n      status: 'fulfilled'\n    };\n  }, function (e) {\n    return {\n      e: e,\n      status: 'rejected'\n    };\n  });\n};\n\nvar ImageHelper = {\n  loadImage: function loadImage(url, options) {\n    var image = ImageCache.get(url, options);\n    return new Promise(function (resolve, reject) {\n      var handleSuccess = function handleSuccess() {\n        resolve(image);\n      };\n\n      var handleError = function handleError() {\n        reject(new Error(\"failed to preload \".concat(url)));\n      };\n\n      if (image.complete) {\n        // image is loaded, go ahead and change the state\n        if (image.naturalWidth && image.naturalHeight) {\n          // successful load\n          handleSuccess();\n        } else {\n          // IE CACHED IMAGES RACE CONDITION\n          // -------------------------------\n          // IE11 sometimes reports cached images as image.complete,\n          // but naturalWidth and naturalHeight = 0.\n          // A few ms later it will get the dimensions correct,\n          // so check a few times before rejecting it.\n          var counter = 1;\n          var checkDimensions = setInterval(function () {\n            if (image.naturalWidth && image.naturalHeight) {\n              window.clearInterval(checkDimensions);\n              handleSuccess();\n            }\n\n            if (counter === 3) {\n              window.clearInterval(checkDimensions);\n              handleError();\n            }\n\n            counter += 1;\n          }, 50);\n        }\n      } else {\n        image.addEventListener('load', handleSuccess, false);\n        image.addEventListener('error', handleError, false);\n      }\n    });\n  },\n  loadImages: function loadImages(urls, options) {\n    var _this = this;\n\n    var promises = urls.map(function (url) {\n      return reflect(_this.loadImage(url, options));\n    });\n    return Promise.all(promises).then(function (promises) {\n      return promises.map(function (p) {\n        if (p.status !== 'fulfilled') {\n          throw new Exception('One or more images failed to load');\n        }\n\n        return p;\n      });\n    });\n  },\n  // preload without caring about the result\n  stuffImages: function stuffImages(urls, options) {\n    ImageCache.stuff(urls, options);\n  }\n};\nexport default ImageHelper;","map":{"version":3,"sources":["/Users/alexandrach/Projects/tresnutye2021/node_modules/react-preload/modules/ImageHelper.js"],"names":["ImageCache","reflect","p","then","v","status","e","ImageHelper","loadImage","url","options","image","get","Promise","resolve","reject","handleSuccess","handleError","Error","complete","naturalWidth","naturalHeight","counter","checkDimensions","setInterval","window","clearInterval","addEventListener","loadImages","urls","promises","map","all","Exception","stuffImages","stuff"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,CAAC;AAAA,SAAIA,CAAC,CAACC,IAAF,CAAO,UAAAC,CAAC;AAAA,WAAK;AAACA,MAAAA,CAAC,EAADA,CAAD;AAAIC,MAAAA,MAAM,EAAE;AAAZ,KAAL;AAAA,GAAR,EACO,UAAAC,CAAC;AAAA,WAAK;AAACA,MAAAA,CAAC,EAADA,CAAD;AAAID,MAAAA,MAAM,EAAE;AAAZ,KAAL;AAAA,GADR,CAAJ;AAAA,CAAjB;;AAGA,IAAME,WAAW,GAAG;AAChBC,EAAAA,SADgB,qBACNC,GADM,EACDC,OADC,EACQ;AACpB,QAAMC,KAAK,GAAGX,UAAU,CAACY,GAAX,CAAeH,GAAf,EAAoBC,OAApB,CAAd;AAEA,WAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,UAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxBF,QAAAA,OAAO,CAACH,KAAD,CAAP;AACH,OAFD;;AAGA,UAAMM,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtBF,QAAAA,MAAM,CAAC,IAAIG,KAAJ,6BAA+BT,GAA/B,EAAD,CAAN;AACH,OAFD;;AAIA,UAAIE,KAAK,CAACQ,QAAV,EAAoB;AAChB;AAEA,YAAIR,KAAK,CAACS,YAAN,IAAsBT,KAAK,CAACU,aAAhC,EAA+C;AAC3C;AACAL,UAAAA,aAAa;AAChB,SAHD,MAGO;AACH;AACA;AACA;AACA;AACA;AACA;AACA,cAAIM,OAAO,GAAG,CAAd;AACA,cAAMC,eAAe,GAAGC,WAAW,CAAC,YAAM;AACtC,gBAAIb,KAAK,CAACS,YAAN,IAAsBT,KAAK,CAACU,aAAhC,EAA+C;AAC3CI,cAAAA,MAAM,CAACC,aAAP,CAAqBH,eAArB;AACAP,cAAAA,aAAa;AAChB;;AACD,gBAAIM,OAAO,KAAK,CAAhB,EAAmB;AACfG,cAAAA,MAAM,CAACC,aAAP,CAAqBH,eAArB;AACAN,cAAAA,WAAW;AACd;;AACDK,YAAAA,OAAO,IAAI,CAAX;AACH,WAVkC,EAUhC,EAVgC,CAAnC;AAWH;AACJ,OA1BD,MA0BO;AACHX,QAAAA,KAAK,CAACgB,gBAAN,CAAuB,MAAvB,EAA+BX,aAA/B,EAA8C,KAA9C;AACAL,QAAAA,KAAK,CAACgB,gBAAN,CAAuB,OAAvB,EAAgCV,WAAhC,EAA6C,KAA7C;AACH;AACJ,KAtCM,CAAP;AAuCH,GA3Ce;AA6ChBW,EAAAA,UA7CgB,sBA6CLC,IA7CK,EA6CCnB,OA7CD,EA6CU;AAAA;;AACtB,QAAMoB,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAAS,UAAAtB,GAAG;AAAA,aAAKR,OAAO,CAAC,KAAI,CAACO,SAAL,CAAeC,GAAf,EAAoBC,OAApB,CAAD,CAAZ;AAAA,KAAZ,CAAjB;AACA,WAAOG,OAAO,CAACmB,GAAR,CAAYF,QAAZ,EAAsB3B,IAAtB,CAA2B,UAAC2B,QAAD,EAAc;AAC5C,aAAOA,QAAQ,CAACC,GAAT,CAAa,UAAC7B,CAAD,EAAO;AACvB,YAAGA,CAAC,CAACG,MAAF,KAAa,WAAhB,EAA6B;AACzB,gBAAM,IAAI4B,SAAJ,CAAc,mCAAd,CAAN;AACH;;AACD,eAAO/B,CAAP;AACH,OALM,CAAP;AAOH,KARM,CAAP;AASH,GAxDe;AA0DhB;AACAgC,EAAAA,WA3DgB,uBA2DJL,IA3DI,EA2DEnB,OA3DF,EA2DW;AACvBV,IAAAA,UAAU,CAACmC,KAAX,CAAiBN,IAAjB,EAAuBnB,OAAvB;AACH;AA7De,CAApB;AAgEA,eAAeH,WAAf","sourcesContent":["import ImageCache from './ImageCache';\n\nconst reflect = p => p.then(v => ({v, status: 'fulfilled' }),\n                            e => ({e, status: 'rejected' }));\n\nconst ImageHelper = {\n    loadImage(url, options) {\n        const image = ImageCache.get(url, options);\n\n        return new Promise((resolve, reject) => {\n            const handleSuccess = () => {\n                resolve(image);\n            };\n            const handleError = () => {\n                reject(new Error(`failed to preload ${url}`));\n            };\n\n            if (image.complete) {\n                // image is loaded, go ahead and change the state\n\n                if (image.naturalWidth && image.naturalHeight) {\n                    // successful load\n                    handleSuccess();\n                } else {\n                    // IE CACHED IMAGES RACE CONDITION\n                    // -------------------------------\n                    // IE11 sometimes reports cached images as image.complete,\n                    // but naturalWidth and naturalHeight = 0.\n                    // A few ms later it will get the dimensions correct,\n                    // so check a few times before rejecting it.\n                    let counter = 1;\n                    const checkDimensions = setInterval(() => {\n                        if (image.naturalWidth && image.naturalHeight) {\n                            window.clearInterval(checkDimensions);\n                            handleSuccess();\n                        }\n                        if (counter === 3) {\n                            window.clearInterval(checkDimensions);\n                            handleError();\n                        }\n                        counter += 1;\n                    }, 50);\n                }\n            } else {\n                image.addEventListener('load', handleSuccess, false);\n                image.addEventListener('error', handleError, false);\n            }\n        });\n    },\n\n    loadImages(urls, options) {\n        const promises = urls.map(url =>  reflect(this.loadImage(url, options)));\n        return Promise.all(promises).then((promises) => {\n            return promises.map((p) => {\n                if(p.status !== 'fulfilled') {\n                    throw new Exception('One or more images failed to load');\n                }\n                return p;\n            }\n        )\n        });\n    },\n\n    // preload without caring about the result\n    stuffImages(urls, options) {\n        ImageCache.stuff(urls, options);\n    },\n};\n\nexport default ImageHelper;\n"]},"metadata":{},"sourceType":"module"}