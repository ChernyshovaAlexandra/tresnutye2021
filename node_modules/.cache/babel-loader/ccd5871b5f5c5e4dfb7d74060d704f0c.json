{"ast":null,"code":"import _regeneratorRuntime from \"/Users/alexandrach/Projects/tresnutye2021/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/alexandrach/Projects/tresnutye2021/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { SET_SHOP_PAGE, VERIFY_CODE_SUCCESS, VERIFY_CODE_FAIL, CODE_REQUEST_SUCCESS, UPDATE_USER_SUCCESS, EDIT_USER_INFO, SET_LOADER, UPDATE_FAILED, QUIT_ACCOUNT, OPEN_FORM, OPEN_SCANER, SET_SPONSORY_PAGE, SET_SCANER_FORM, SET_CHECKS, SET_CHECKS_FAILED, CODE_REQUEST_FAILED, SHOW_CHECK_LIST, SET_WINNERS_LIST, SET_WINNERS_LIST_FAILED } from './actionTypes';\nimport API from \"../utils/API\"; // Открыть страницу с картой\n\nexport var setShopPage = function setShopPage(action) {\n  return {\n    type: SET_SHOP_PAGE,\n    payload: action\n  };\n}; // Ввод чека в сканере вручную\n\nexport var setScanerForm = function setScanerForm(action) {\n  return {\n    type: SET_SCANER_FORM,\n    payload: action\n  };\n}; // Открыть страницу товаров-спонсоров\n\nexport var setSponsoryPage = function setSponsoryPage(action) {\n  return {\n    type: SET_SPONSORY_PAGE,\n    payload: action\n  };\n}; // ВЫЗВАТЬ ФОРМУ\n\nexport var setForm = function setForm(action) {\n  return {\n    type: OPEN_FORM,\n    payload: action\n  };\n}; // Вызвать сканер\n\nexport var openScaner = function openScaner(action) {\n  return {\n    type: OPEN_SCANER,\n    payload: action\n  };\n}; // Если есть активная сессия и юзер уже залогинен\n\nexport var handleCheckToken = function handleCheckToken(token) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return API.get(\"/profile\", {\n                headers: {\n                  \"Authorization\": \"Bearer \".concat(token)\n                }\n              }).then(function (response) {\n                var _response$data$data = response.data.data,\n                    first_name = _response$data$data.first_name,\n                    last_name = _response$data$data.last_name,\n                    email = _response$data$data.email,\n                    birthday = _response$data$data.birthday,\n                    region = _response$data$data.region,\n                    agreement = _response$data$data.agreement;\n                dispatch({\n                  type: VERIFY_CODE_SUCCESS,\n                  payload: {\n                    userName: first_name,\n                    userLastName: last_name,\n                    userEmail: email,\n                    userBirthDate: birthday,\n                    confirmedRules: agreement,\n                    region: region,\n                    token: token\n                  }\n                });\n                dispatch(GetAllChecks(token));\n              }, function (error) {\n                dispatch({\n                  type: VERIFY_CODE_FAIL,\n                  payload: error.message\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}; // Выйти из аккаунта\n\nexport var quitAccount = function quitAccount() {\n  return {\n    type: QUIT_ACCOUNT\n  };\n}; // Отправить код на номер телефона\n\nexport var handleSendCode = function handleSendCode(userPhone) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return API.post(\"/login_sms\", {\n                phone: userPhone\n              }).then(function (response) {\n                dispatch({\n                  type: CODE_REQUEST_SUCCESS,\n                  payload: response.data.data\n                });\n              }, function (error) {\n                dispatch({\n                  type: CODE_REQUEST_FAILED,\n                  payload: 'Не удалось отправить код. Проверьте введенный номер'\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}; // Проверка кода, который ввели на сайте с тем, который прслали на телефон\n\nexport var handleCheckCode = function handleCheckCode(userPhone, userCode) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return API.post(\"/sms\", {\n                phone: userPhone,\n                confirm_code: userCode\n              }).then(function (response) {\n                var jsR = response;\n                var _jsR$data = jsR.data,\n                    token = _jsR$data.token,\n                    message = _jsR$data.message,\n                    success = _jsR$data.success;\n\n                if (message) {\n                  dispatch({\n                    type: VERIFY_CODE_FAIL,\n                    payload: message\n                  });\n                }\n\n                if (success) {\n                  // Сохранить токен\n                  window.localStorage.setItem('userToken', token); // Инициализация пользователя\n\n                  dispatch(handleCheckToken(token));\n                }\n              }, function (error) {\n                dispatch({\n                  type: VERIFY_CODE_FAIL,\n                  payload: 'Неверный код подтверждения'\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n}; // По нажатию на кнопку Редактировать\n\nexport var editUserInfo = function editUserInfo(action) {\n  return {\n    type: EDIT_USER_INFO,\n    payload: action\n  };\n}; // Обновить данные юзера\n\nexport var handleUpdateUser = function handleUpdateUser(userData, token) {\n  var name = userData.name,\n      lastName = userData.lastName,\n      email = userData.email,\n      phone = userData.phone,\n      region = userData.region;\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return API.post(\"/profile/update\", {\n                first_name: name,\n                last_name: lastName,\n                email: email,\n                region: region\n              }, {\n                headers: {\n                  \"Authorization\": \"Bearer \".concat(token)\n                }\n              }).then(function (response) {\n                dispatch({\n                  type: UPDATE_USER_SUCCESS,\n                  payload: {\n                    user_name: name,\n                    user_last_name: lastName,\n                    user_email: email,\n                    user_city: region\n                  }\n                });\n                dispatch(editUserInfo(false));\n              }, function (error) {\n                dispatch({\n                  type: UPDATE_FAILED,\n                  payload: error.message\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nexport var loading = function loading(action) {\n  return {\n    type: SET_LOADER,\n    payload: action\n  };\n}; // Получить мои чеки с данными\n\nexport var GetAllChecks = function GetAllChecks(token) {\n  return /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return API.get(\"/checks\", {\n                headers: {\n                  \"Authorization\": \"Bearer \".concat(token)\n                }\n              }).then(function (response) {\n                dispatch({\n                  type: SET_CHECKS,\n                  payload: response.data.data\n                });\n              }, function (error) {\n                dispatch({\n                  type: SET_CHECKS_FAILED,\n                  payload: 'Oшибка получения данных. Попробуйте позже'\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n};\n_c = GetAllChecks;\nexport var sendCheck = function sendCheck(token, data) {\n  var date = data.date,\n      fn = data.fn,\n      fp = data.fp,\n      doc_number = data.doc_number;\n  return /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return API.post(\"/checks\", {\n                date: date,\n                fn: fn,\n                fp: fp,\n                doc_number: doc_number\n              }, {\n                headers: {\n                  \"Authorization\": \"Bearer \".concat(token)\n                }\n              }).then(function (response) {\n                if (response.data.success) {\n                  dispatch({\n                    message: response.data.message,\n                    name: \"Чек принят\"\n                  });\n                } else {\n                  dispatch({\n                    message: response.data.message,\n                    name: \"Чек не принят\"\n                  });\n                }\n              }, function (error) {\n                dispatch({\n                  message: \"Qr-код, который вы сканируете, не прошел валидацию\",\n                  name: \"Чек не принят\"\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n};\nexport var showCheckList = function showCheckList(action) {\n  return {\n    type: SHOW_CHECK_LIST,\n    payload: action\n  };\n}; // отправить данные чека\n\nexport var getWinners = function getWinners() {\n  return /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return API.get(\"/winners\", {}).then(function (response) {\n                dispatch({\n                  type: SET_WINNERS_LIST,\n                  payload: response.data\n                });\n              }, function (error) {\n                dispatch({\n                  type: SET_WINNERS_LIST_FAILED,\n                  payload: 'Oшибка получения данных. Попробуйте позже'\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function (_x7) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"GetAllChecks\");","map":{"version":3,"sources":["/Users/alexandrach/Projects/tresnutye2021/src/store/actions.js"],"names":["SET_SHOP_PAGE","VERIFY_CODE_SUCCESS","VERIFY_CODE_FAIL","CODE_REQUEST_SUCCESS","UPDATE_USER_SUCCESS","EDIT_USER_INFO","SET_LOADER","UPDATE_FAILED","QUIT_ACCOUNT","OPEN_FORM","OPEN_SCANER","SET_SPONSORY_PAGE","SET_SCANER_FORM","SET_CHECKS","SET_CHECKS_FAILED","CODE_REQUEST_FAILED","SHOW_CHECK_LIST","SET_WINNERS_LIST","SET_WINNERS_LIST_FAILED","API","setShopPage","action","type","payload","setScanerForm","setSponsoryPage","setForm","openScaner","handleCheckToken","token","dispatch","get","headers","then","response","data","first_name","last_name","email","birthday","region","agreement","userName","userLastName","userEmail","userBirthDate","confirmedRules","GetAllChecks","error","message","quitAccount","handleSendCode","userPhone","post","phone","handleCheckCode","userCode","confirm_code","jsR","success","window","localStorage","setItem","editUserInfo","handleUpdateUser","userData","name","lastName","user_name","user_last_name","user_email","user_city","loading","sendCheck","date","fn","fp","doc_number","showCheckList","getWinners"],"mappings":"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","sourcesContent":["import {\n    SET_SHOP_PAGE,\n    VERIFY_CODE_SUCCESS,\n    VERIFY_CODE_FAIL,\n    CODE_REQUEST_SUCCESS,\n    UPDATE_USER_SUCCESS,\n    EDIT_USER_INFO,\n    SET_LOADER,\n    UPDATE_FAILED,\n    QUIT_ACCOUNT,\n    OPEN_FORM,\n    OPEN_SCANER,\n    SET_SPONSORY_PAGE,\n    SET_SCANER_FORM,\n    SET_CHECKS,\n    SET_CHECKS_FAILED,\n    CODE_REQUEST_FAILED,\n    SHOW_CHECK_LIST,\n    SET_WINNERS_LIST,\n    SET_WINNERS_LIST_FAILED\n} from './actionTypes'\nimport API from \"../utils/API\";\n\n// Открыть страницу с картой\nexport const setShopPage = (action) => ({\n    type: SET_SHOP_PAGE,\n    payload: action\n})\n\n// Ввод чека в сканере вручную\nexport const setScanerForm = (action) => ({\n    type: SET_SCANER_FORM,\n    payload: action\n})\n\n// Открыть страницу товаров-спонсоров\nexport const setSponsoryPage = (action) => ({\n    type: SET_SPONSORY_PAGE,\n    payload: action\n})\n\n\n// ВЫЗВАТЬ ФОРМУ\nexport const setForm = (action) => ({\n    type: OPEN_FORM,\n    payload: action\n})\n\n// Вызвать сканер\nexport const openScaner = action => ({\n    type: OPEN_SCANER,\n    payload: action\n})\n\n\n// Если есть активная сессия и юзер уже залогинен\nexport const handleCheckToken = (token) => {\n\n    return async dispatch => {\n        await API.get(\n            \"/profile\",\n            { headers: { \"Authorization\": `Bearer ${token}` } },\n        )\n            .then(\n                (response) => {\n                    const { first_name, last_name, email, birthday, region, agreement } = response.data.data\n                    dispatch({\n                        type: VERIFY_CODE_SUCCESS,\n                        payload: {\n                            userName: first_name,\n                            userLastName: last_name,\n                            userEmail: email,\n                            userBirthDate: birthday,\n                            confirmedRules: agreement,\n                            region: region,\n                            token: token\n                        }\n                    })\n                    dispatch(GetAllChecks(token))\n                },\n                (error) => {\n                    dispatch({\n                        type: VERIFY_CODE_FAIL,\n                        payload: error.message\n                    })\n                })\n    }\n}\n\n// Выйти из аккаунта\nexport const quitAccount = () => ({\n    type: QUIT_ACCOUNT\n})\n\n\n// Отправить код на номер телефона\nexport const handleSendCode = userPhone => {\n    return async dispatch => {\n        await API.post(\"/login_sms\", {\n            phone: userPhone\n        })\n            .then(\n                (response) => {\n                    dispatch({\n                        type: CODE_REQUEST_SUCCESS,\n                        payload: response.data.data\n                    })\n                },\n                (error) => {\n                    dispatch({\n                        type: CODE_REQUEST_FAILED,\n                        payload: 'Не удалось отправить код. Проверьте введенный номер'\n                    })\n                }\n            );\n\n    }\n}\n\n// Проверка кода, который ввели на сайте с тем, который прслали на телефон\nexport const handleCheckCode = (userPhone, userCode) => {\n    return async dispatch => {\n\n        await API.post(\"/sms\", {\n            phone: userPhone,\n            confirm_code: userCode\n        })\n            .then(\n                (response) => {\n                    let jsR = response\n                    const { token, message, success } = jsR.data\n\n                    if (message) {\n                        dispatch({\n                            type: VERIFY_CODE_FAIL,\n                            payload: message\n                        })\n\n                    }\n                    if (success) {\n                        // Сохранить токен\n                        window.localStorage.setItem('userToken', token)\n\n                        // Инициализация пользователя\n                        dispatch(handleCheckToken(token))\n                    }\n                },\n                (error) => {\n                    dispatch({\n                        type: VERIFY_CODE_FAIL,\n                        payload: 'Неверный код подтверждения'\n                    })\n                }\n            );\n\n\n\n    }\n}\n\n// По нажатию на кнопку Редактировать\nexport const editUserInfo = (action) => ({\n    type: EDIT_USER_INFO,\n    payload: action\n})\n\n\n// Обновить данные юзера\nexport const handleUpdateUser = (userData, token) => {\n    const { name,\n        lastName,\n        email,\n        phone,\n        region } = userData\n\n    return async dispatch => {\n        await API.post(\"/profile/update\",\n            {\n                first_name: name,\n                last_name: lastName,\n                email: email,\n                region: region,\n            },\n            {\n                headers:\n                    { \"Authorization\": `Bearer ${token}` }\n            })\n            .then(\n                (response) => {\n                    dispatch({\n                        type: UPDATE_USER_SUCCESS,\n                        payload: {\n                            user_name: name,\n                            user_last_name: lastName,\n                            user_email: email,\n                            user_city: region,\n\n                        }\n                    })\n                    dispatch(editUserInfo(false))\n                },\n                (error) => {\n                    dispatch({\n                        type: UPDATE_FAILED,\n                        payload: error.message\n                    })\n                }\n            )\n\n    }\n}\n\n\nexport const loading = (action) => ({\n    type: SET_LOADER,\n    payload: action\n})\n\n\n// Получить мои чеки с данными\nexport const GetAllChecks = (token) => {\n    return async dispatch => {\n        await API.get(\"/checks\", {\n            headers:\n                { \"Authorization\": `Bearer ${token}` }\n        })\n            .then(\n                (response) => {\n                    dispatch({\n                        type: SET_CHECKS,\n                        payload: response.data.data\n                    })\n                },\n                (error) => {\n                    dispatch({\n                        type: SET_CHECKS_FAILED,\n                        payload: 'Oшибка получения данных. Попробуйте позже'\n                    })\n                }\n            );\n\n    }\n}\n\nexport const sendCheck = (token, data) => {\n    const { date, fn, fp, doc_number } = data\n    return async dispatch => {\n        await API.post(\"/checks\", {\n            date,\n            fn,\n            fp,\n            doc_number,\n        }, { headers: { \"Authorization\": `Bearer ${token}` } })\n            .then(\n                (response) => {\n                    if (response.data.success) {\n                        dispatch({\n                            message: response.data.message,\n                            name: \"Чек принят\",\n                        });\n                    }\n                    else {\n                        dispatch({\n                            message: response.data.message,\n                            name: \"Чек не принят\",\n                        });\n                    }\n                },\n                (error) => {\n                    dispatch({\n                        message: \"Qr-код, который вы сканируете, не прошел валидацию\",\n                        name: \"Чек не принят\",\n                    });\n                }\n            );\n\n    }\n}\nexport const showCheckList = action => ({\n    type: SHOW_CHECK_LIST,\n    payload: action\n})\n\n\n// отправить данные чека\nexport const getWinners = () => {\n    return async dispatch => {\n        await API.get(\"/winners\", {})\n            .then(\n                (response) => {\n\n                    dispatch({\n                        type: SET_WINNERS_LIST,\n                        payload: response.data\n                    })\n\n                },\n                (error) => {\n                    dispatch({\n                        type: SET_WINNERS_LIST_FAILED,\n                        payload: 'Oшибка получения данных. Попробуйте позже'\n                    })\n                }\n            );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}