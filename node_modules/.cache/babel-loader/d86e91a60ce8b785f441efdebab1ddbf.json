{"ast":null,"code":"/*!\n * @pixi/mixin-cache-as-bitmap - v6.1.3\n * Compiled Mon, 13 Sep 2021 15:29:31 UTC\n *\n * @pixi/mixin-cache-as-bitmap is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { RenderTexture, BaseTexture, Texture } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { DisplayObject } from '@pixi/display';\nimport { Matrix } from '@pixi/math';\nimport { uid } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\n/*!\n * @pixi/constants - v6.1.3\n * Compiled Mon, 13 Sep 2021 15:29:31 UTC\n *\n * @pixi/constants is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n\n/**\n * Different types of environments for WebGL.\n *\n * @static\n * @memberof PIXI\n * @name ENV\n * @enum {number}\n * @property {number} WEBGL_LEGACY - Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility\n *  with older / less advanced devices. If you experience unexplained flickering prefer this environment.\n * @property {number} WEBGL - Version 1 of WebGL\n * @property {number} WEBGL2 - Version 2 of WebGL\n */\n\nvar ENV;\n\n(function (ENV) {\n  ENV[ENV[\"WEBGL_LEGACY\"] = 0] = \"WEBGL_LEGACY\";\n  ENV[ENV[\"WEBGL\"] = 1] = \"WEBGL\";\n  ENV[ENV[\"WEBGL2\"] = 2] = \"WEBGL2\";\n})(ENV || (ENV = {}));\n/**\n * Constant to identify the Renderer Type.\n *\n * @static\n * @memberof PIXI\n * @name RENDERER_TYPE\n * @enum {number}\n * @property {number} UNKNOWN - Unknown render type.\n * @property {number} WEBGL - WebGL render type.\n * @property {number} CANVAS - Canvas render type.\n */\n\n\nvar RENDERER_TYPE;\n\n(function (RENDERER_TYPE) {\n  RENDERER_TYPE[RENDERER_TYPE[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  RENDERER_TYPE[RENDERER_TYPE[\"WEBGL\"] = 1] = \"WEBGL\";\n  RENDERER_TYPE[RENDERER_TYPE[\"CANVAS\"] = 2] = \"CANVAS\";\n})(RENDERER_TYPE || (RENDERER_TYPE = {}));\n/**\n * Bitwise OR of masks that indicate the buffers to be cleared.\n *\n * @static\n * @memberof PIXI\n * @name BUFFER_BITS\n * @enum {number}\n * @property {number} COLOR - Indicates the buffers currently enabled for color writing.\n * @property {number} DEPTH - Indicates the depth buffer.\n * @property {number} STENCIL - Indicates the stencil buffer.\n */\n\n\nvar BUFFER_BITS;\n\n(function (BUFFER_BITS) {\n  BUFFER_BITS[BUFFER_BITS[\"COLOR\"] = 16384] = \"COLOR\";\n  BUFFER_BITS[BUFFER_BITS[\"DEPTH\"] = 256] = \"DEPTH\";\n  BUFFER_BITS[BUFFER_BITS[\"STENCIL\"] = 1024] = \"STENCIL\";\n})(BUFFER_BITS || (BUFFER_BITS = {}));\n/**\n * Various blend modes supported by PIXI.\n *\n * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.\n * Anything else will silently act like NORMAL.\n *\n * @memberof PIXI\n * @name BLEND_MODES\n * @enum {number}\n * @property {number} NORMAL\n * @property {number} ADD\n * @property {number} MULTIPLY\n * @property {number} SCREEN\n * @property {number} OVERLAY\n * @property {number} DARKEN\n * @property {number} LIGHTEN\n * @property {number} COLOR_DODGE\n * @property {number} COLOR_BURN\n * @property {number} HARD_LIGHT\n * @property {number} SOFT_LIGHT\n * @property {number} DIFFERENCE\n * @property {number} EXCLUSION\n * @property {number} HUE\n * @property {number} SATURATION\n * @property {number} COLOR\n * @property {number} LUMINOSITY\n * @property {number} NORMAL_NPM\n * @property {number} ADD_NPM\n * @property {number} SCREEN_NPM\n * @property {number} NONE\n * @property {number} SRC_IN\n * @property {number} SRC_OUT\n * @property {number} SRC_ATOP\n * @property {number} DST_OVER\n * @property {number} DST_IN\n * @property {number} DST_OUT\n * @property {number} DST_ATOP\n * @property {number} SUBTRACT\n * @property {number} SRC_OVER\n * @property {number} ERASE\n * @property {number} XOR\n */\n\n\nvar BLEND_MODES;\n\n(function (BLEND_MODES) {\n  BLEND_MODES[BLEND_MODES[\"NORMAL\"] = 0] = \"NORMAL\";\n  BLEND_MODES[BLEND_MODES[\"ADD\"] = 1] = \"ADD\";\n  BLEND_MODES[BLEND_MODES[\"MULTIPLY\"] = 2] = \"MULTIPLY\";\n  BLEND_MODES[BLEND_MODES[\"SCREEN\"] = 3] = \"SCREEN\";\n  BLEND_MODES[BLEND_MODES[\"OVERLAY\"] = 4] = \"OVERLAY\";\n  BLEND_MODES[BLEND_MODES[\"DARKEN\"] = 5] = \"DARKEN\";\n  BLEND_MODES[BLEND_MODES[\"LIGHTEN\"] = 6] = \"LIGHTEN\";\n  BLEND_MODES[BLEND_MODES[\"COLOR_DODGE\"] = 7] = \"COLOR_DODGE\";\n  BLEND_MODES[BLEND_MODES[\"COLOR_BURN\"] = 8] = \"COLOR_BURN\";\n  BLEND_MODES[BLEND_MODES[\"HARD_LIGHT\"] = 9] = \"HARD_LIGHT\";\n  BLEND_MODES[BLEND_MODES[\"SOFT_LIGHT\"] = 10] = \"SOFT_LIGHT\";\n  BLEND_MODES[BLEND_MODES[\"DIFFERENCE\"] = 11] = \"DIFFERENCE\";\n  BLEND_MODES[BLEND_MODES[\"EXCLUSION\"] = 12] = \"EXCLUSION\";\n  BLEND_MODES[BLEND_MODES[\"HUE\"] = 13] = \"HUE\";\n  BLEND_MODES[BLEND_MODES[\"SATURATION\"] = 14] = \"SATURATION\";\n  BLEND_MODES[BLEND_MODES[\"COLOR\"] = 15] = \"COLOR\";\n  BLEND_MODES[BLEND_MODES[\"LUMINOSITY\"] = 16] = \"LUMINOSITY\";\n  BLEND_MODES[BLEND_MODES[\"NORMAL_NPM\"] = 17] = \"NORMAL_NPM\";\n  BLEND_MODES[BLEND_MODES[\"ADD_NPM\"] = 18] = \"ADD_NPM\";\n  BLEND_MODES[BLEND_MODES[\"SCREEN_NPM\"] = 19] = \"SCREEN_NPM\";\n  BLEND_MODES[BLEND_MODES[\"NONE\"] = 20] = \"NONE\";\n  BLEND_MODES[BLEND_MODES[\"SRC_OVER\"] = 0] = \"SRC_OVER\";\n  BLEND_MODES[BLEND_MODES[\"SRC_IN\"] = 21] = \"SRC_IN\";\n  BLEND_MODES[BLEND_MODES[\"SRC_OUT\"] = 22] = \"SRC_OUT\";\n  BLEND_MODES[BLEND_MODES[\"SRC_ATOP\"] = 23] = \"SRC_ATOP\";\n  BLEND_MODES[BLEND_MODES[\"DST_OVER\"] = 24] = \"DST_OVER\";\n  BLEND_MODES[BLEND_MODES[\"DST_IN\"] = 25] = \"DST_IN\";\n  BLEND_MODES[BLEND_MODES[\"DST_OUT\"] = 26] = \"DST_OUT\";\n  BLEND_MODES[BLEND_MODES[\"DST_ATOP\"] = 27] = \"DST_ATOP\";\n  BLEND_MODES[BLEND_MODES[\"ERASE\"] = 26] = \"ERASE\";\n  BLEND_MODES[BLEND_MODES[\"SUBTRACT\"] = 28] = \"SUBTRACT\";\n  BLEND_MODES[BLEND_MODES[\"XOR\"] = 29] = \"XOR\";\n})(BLEND_MODES || (BLEND_MODES = {}));\n/**\n * Various webgl draw modes. These can be used to specify which GL drawMode to use\n * under certain situations and renderers.\n *\n * @memberof PIXI\n * @static\n * @name DRAW_MODES\n * @enum {number}\n * @property {number} POINTS\n * @property {number} LINES\n * @property {number} LINE_LOOP\n * @property {number} LINE_STRIP\n * @property {number} TRIANGLES\n * @property {number} TRIANGLE_STRIP\n * @property {number} TRIANGLE_FAN\n */\n\n\nvar DRAW_MODES;\n\n(function (DRAW_MODES) {\n  DRAW_MODES[DRAW_MODES[\"POINTS\"] = 0] = \"POINTS\";\n  DRAW_MODES[DRAW_MODES[\"LINES\"] = 1] = \"LINES\";\n  DRAW_MODES[DRAW_MODES[\"LINE_LOOP\"] = 2] = \"LINE_LOOP\";\n  DRAW_MODES[DRAW_MODES[\"LINE_STRIP\"] = 3] = \"LINE_STRIP\";\n  DRAW_MODES[DRAW_MODES[\"TRIANGLES\"] = 4] = \"TRIANGLES\";\n  DRAW_MODES[DRAW_MODES[\"TRIANGLE_STRIP\"] = 5] = \"TRIANGLE_STRIP\";\n  DRAW_MODES[DRAW_MODES[\"TRIANGLE_FAN\"] = 6] = \"TRIANGLE_FAN\";\n})(DRAW_MODES || (DRAW_MODES = {}));\n/**\n * Various GL texture/resources formats.\n *\n * @memberof PIXI\n * @static\n * @name FORMATS\n * @enum {number}\n * @property {number} RGBA=6408\n * @property {number} RGB=6407\n * @property {number} RG=33319\n * @property {number} RED=6403\n * @property {number} RGBA_INTEGER=36249\n * @property {number} RGB_INTEGER=36248\n * @property {number} RG_INTEGER=33320\n * @property {number} RED_INTEGER=36244\n * @property {number} ALPHA=6406\n * @property {number} LUMINANCE=6409\n * @property {number} LUMINANCE_ALPHA=6410\n * @property {number} DEPTH_COMPONENT=6402\n * @property {number} DEPTH_STENCIL=34041\n */\n\n\nvar FORMATS;\n\n(function (FORMATS) {\n  FORMATS[FORMATS[\"RGBA\"] = 6408] = \"RGBA\";\n  FORMATS[FORMATS[\"RGB\"] = 6407] = \"RGB\";\n  FORMATS[FORMATS[\"RG\"] = 33319] = \"RG\";\n  FORMATS[FORMATS[\"RED\"] = 6403] = \"RED\";\n  FORMATS[FORMATS[\"RGBA_INTEGER\"] = 36249] = \"RGBA_INTEGER\";\n  FORMATS[FORMATS[\"RGB_INTEGER\"] = 36248] = \"RGB_INTEGER\";\n  FORMATS[FORMATS[\"RG_INTEGER\"] = 33320] = \"RG_INTEGER\";\n  FORMATS[FORMATS[\"RED_INTEGER\"] = 36244] = \"RED_INTEGER\";\n  FORMATS[FORMATS[\"ALPHA\"] = 6406] = \"ALPHA\";\n  FORMATS[FORMATS[\"LUMINANCE\"] = 6409] = \"LUMINANCE\";\n  FORMATS[FORMATS[\"LUMINANCE_ALPHA\"] = 6410] = \"LUMINANCE_ALPHA\";\n  FORMATS[FORMATS[\"DEPTH_COMPONENT\"] = 6402] = \"DEPTH_COMPONENT\";\n  FORMATS[FORMATS[\"DEPTH_STENCIL\"] = 34041] = \"DEPTH_STENCIL\";\n})(FORMATS || (FORMATS = {}));\n/**\n * Various GL target types.\n *\n * @memberof PIXI\n * @static\n * @name TARGETS\n * @enum {number}\n * @property {number} TEXTURE_2D=3553\n * @property {number} TEXTURE_CUBE_MAP=34067\n * @property {number} TEXTURE_2D_ARRAY=35866\n * @property {number} TEXTURE_CUBE_MAP_POSITIVE_X=34069\n * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_X=34070\n * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Y=34071\n * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Y=34072\n * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Z=34073\n * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Z=34074\n */\n\n\nvar TARGETS;\n\n(function (TARGETS) {\n  TARGETS[TARGETS[\"TEXTURE_2D\"] = 3553] = \"TEXTURE_2D\";\n  TARGETS[TARGETS[\"TEXTURE_CUBE_MAP\"] = 34067] = \"TEXTURE_CUBE_MAP\";\n  TARGETS[TARGETS[\"TEXTURE_2D_ARRAY\"] = 35866] = \"TEXTURE_2D_ARRAY\";\n  TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_POSITIVE_X\"] = 34069] = \"TEXTURE_CUBE_MAP_POSITIVE_X\";\n  TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_NEGATIVE_X\"] = 34070] = \"TEXTURE_CUBE_MAP_NEGATIVE_X\";\n  TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_POSITIVE_Y\"] = 34071] = \"TEXTURE_CUBE_MAP_POSITIVE_Y\";\n  TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_NEGATIVE_Y\"] = 34072] = \"TEXTURE_CUBE_MAP_NEGATIVE_Y\";\n  TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_POSITIVE_Z\"] = 34073] = \"TEXTURE_CUBE_MAP_POSITIVE_Z\";\n  TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_NEGATIVE_Z\"] = 34074] = \"TEXTURE_CUBE_MAP_NEGATIVE_Z\";\n})(TARGETS || (TARGETS = {}));\n/**\n * Various GL data format types.\n *\n * @memberof PIXI\n * @static\n * @name TYPES\n * @enum {number}\n * @property {number} UNSIGNED_BYTE=5121\n * @property {number} UNSIGNED_SHORT=5123\n * @property {number} UNSIGNED_SHORT_5_6_5=33635\n * @property {number} UNSIGNED_SHORT_4_4_4_4=32819\n * @property {number} UNSIGNED_SHORT_5_5_5_1=32820\n * @property {number} UNSIGNED_INT=5125\n * @property {number} UNSIGNED_INT_10F_11F_11F_REV=35899\n * @property {number} UNSIGNED_INT_2_10_10_10_REV=33640\n * @property {number} UNSIGNED_INT_24_8=34042\n * @property {number} UNSIGNED_INT_5_9_9_9_REV=35902\n * @property {number} BYTE=5120\n * @property {number} SHORT=5122\n * @property {number} INT=5124\n * @property {number} FLOAT=5126\n * @property {number} FLOAT_32_UNSIGNED_INT_24_8_REV=36269\n * @property {number} HALF_FLOAT=36193\n */\n\n\nvar TYPES;\n\n(function (TYPES) {\n  TYPES[TYPES[\"UNSIGNED_BYTE\"] = 5121] = \"UNSIGNED_BYTE\";\n  TYPES[TYPES[\"UNSIGNED_SHORT\"] = 5123] = \"UNSIGNED_SHORT\";\n  TYPES[TYPES[\"UNSIGNED_SHORT_5_6_5\"] = 33635] = \"UNSIGNED_SHORT_5_6_5\";\n  TYPES[TYPES[\"UNSIGNED_SHORT_4_4_4_4\"] = 32819] = \"UNSIGNED_SHORT_4_4_4_4\";\n  TYPES[TYPES[\"UNSIGNED_SHORT_5_5_5_1\"] = 32820] = \"UNSIGNED_SHORT_5_5_5_1\";\n  TYPES[TYPES[\"UNSIGNED_INT\"] = 5125] = \"UNSIGNED_INT\";\n  TYPES[TYPES[\"UNSIGNED_INT_10F_11F_11F_REV\"] = 35899] = \"UNSIGNED_INT_10F_11F_11F_REV\";\n  TYPES[TYPES[\"UNSIGNED_INT_2_10_10_10_REV\"] = 33640] = \"UNSIGNED_INT_2_10_10_10_REV\";\n  TYPES[TYPES[\"UNSIGNED_INT_24_8\"] = 34042] = \"UNSIGNED_INT_24_8\";\n  TYPES[TYPES[\"UNSIGNED_INT_5_9_9_9_REV\"] = 35902] = \"UNSIGNED_INT_5_9_9_9_REV\";\n  TYPES[TYPES[\"BYTE\"] = 5120] = \"BYTE\";\n  TYPES[TYPES[\"SHORT\"] = 5122] = \"SHORT\";\n  TYPES[TYPES[\"INT\"] = 5124] = \"INT\";\n  TYPES[TYPES[\"FLOAT\"] = 5126] = \"FLOAT\";\n  TYPES[TYPES[\"FLOAT_32_UNSIGNED_INT_24_8_REV\"] = 36269] = \"FLOAT_32_UNSIGNED_INT_24_8_REV\";\n  TYPES[TYPES[\"HALF_FLOAT\"] = 36193] = \"HALF_FLOAT\";\n})(TYPES || (TYPES = {}));\n/**\n * Various sampler types. Correspond to `sampler`, `isampler`, `usampler` GLSL types respectively.\n * WebGL1 works only with FLOAT.\n *\n * @memberof PIXI\n * @static\n * @name SAMPLER_TYPES\n * @enum {number}\n * @property {number} FLOAT=0\n * @property {number} INT=1\n * @property {number} UINT=2\n */\n\n\nvar SAMPLER_TYPES;\n\n(function (SAMPLER_TYPES) {\n  SAMPLER_TYPES[SAMPLER_TYPES[\"FLOAT\"] = 0] = \"FLOAT\";\n  SAMPLER_TYPES[SAMPLER_TYPES[\"INT\"] = 1] = \"INT\";\n  SAMPLER_TYPES[SAMPLER_TYPES[\"UINT\"] = 2] = \"UINT\";\n})(SAMPLER_TYPES || (SAMPLER_TYPES = {}));\n/**\n * The scale modes that are supported by pixi.\n *\n * The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.\n * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.\n *\n * @memberof PIXI\n * @static\n * @name SCALE_MODES\n * @enum {number}\n * @property {number} LINEAR Smooth scaling\n * @property {number} NEAREST Pixelating scaling\n */\n\n\nvar SCALE_MODES;\n\n(function (SCALE_MODES) {\n  SCALE_MODES[SCALE_MODES[\"NEAREST\"] = 0] = \"NEAREST\";\n  SCALE_MODES[SCALE_MODES[\"LINEAR\"] = 1] = \"LINEAR\";\n})(SCALE_MODES || (SCALE_MODES = {}));\n/**\n * The wrap modes that are supported by pixi.\n *\n * The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.\n * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.\n * If the texture is non power of two then clamp will be used regardless as WebGL can\n * only use REPEAT if the texture is po2.\n *\n * This property only affects WebGL.\n *\n * @name WRAP_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} CLAMP - The textures uvs are clamped\n * @property {number} REPEAT - The texture uvs tile and repeat\n * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring\n */\n\n\nvar WRAP_MODES;\n\n(function (WRAP_MODES) {\n  WRAP_MODES[WRAP_MODES[\"CLAMP\"] = 33071] = \"CLAMP\";\n  WRAP_MODES[WRAP_MODES[\"REPEAT\"] = 10497] = \"REPEAT\";\n  WRAP_MODES[WRAP_MODES[\"MIRRORED_REPEAT\"] = 33648] = \"MIRRORED_REPEAT\";\n})(WRAP_MODES || (WRAP_MODES = {}));\n/**\n * Mipmap filtering modes that are supported by pixi.\n *\n * The {@link PIXI.settings.MIPMAP_TEXTURES} affects default texture filtering.\n * Mipmaps are generated for a baseTexture if its `mipmap` field is `ON`,\n * or its `POW2` and texture dimensions are powers of 2.\n * Due to platform restriction, `ON` option will work like `POW2` for webgl-1.\n *\n * This property only affects WebGL.\n *\n * @name MIPMAP_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} OFF - No mipmaps\n * @property {number} POW2 - Generate mipmaps if texture dimensions are pow2\n * @property {number} ON - Always generate mipmaps\n * @property {number} ON_MANUAL - Use mipmaps, but do not auto-generate them; this is used with a resource\n *   that supports buffering each level-of-detail.\n */\n\n\nvar MIPMAP_MODES;\n\n(function (MIPMAP_MODES) {\n  MIPMAP_MODES[MIPMAP_MODES[\"OFF\"] = 0] = \"OFF\";\n  MIPMAP_MODES[MIPMAP_MODES[\"POW2\"] = 1] = \"POW2\";\n  MIPMAP_MODES[MIPMAP_MODES[\"ON\"] = 2] = \"ON\";\n  MIPMAP_MODES[MIPMAP_MODES[\"ON_MANUAL\"] = 3] = \"ON_MANUAL\";\n})(MIPMAP_MODES || (MIPMAP_MODES = {}));\n/**\n * How to treat textures with premultiplied alpha\n *\n * @name ALPHA_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NO_PREMULTIPLIED_ALPHA - Source is not premultiplied, leave it like that.\n *  Option for compressed and data textures that are created from typed arrays.\n * @property {number} PREMULTIPLY_ON_UPLOAD - Source is not premultiplied, premultiply on upload.\n *  Default option, used for all loaded images.\n * @property {number} PREMULTIPLIED_ALPHA - Source is already premultiplied\n *  Example: spine atlases with `_pma` suffix.\n * @property {number} NPM - Alias for NO_PREMULTIPLIED_ALPHA.\n * @property {number} UNPACK - Default option, alias for PREMULTIPLY_ON_UPLOAD.\n * @property {number} PMA - Alias for PREMULTIPLIED_ALPHA.\n */\n\n\nvar ALPHA_MODES;\n\n(function (ALPHA_MODES) {\n  ALPHA_MODES[ALPHA_MODES[\"NPM\"] = 0] = \"NPM\";\n  ALPHA_MODES[ALPHA_MODES[\"UNPACK\"] = 1] = \"UNPACK\";\n  ALPHA_MODES[ALPHA_MODES[\"PMA\"] = 2] = \"PMA\";\n  ALPHA_MODES[ALPHA_MODES[\"NO_PREMULTIPLIED_ALPHA\"] = 0] = \"NO_PREMULTIPLIED_ALPHA\";\n  ALPHA_MODES[ALPHA_MODES[\"PREMULTIPLY_ON_UPLOAD\"] = 1] = \"PREMULTIPLY_ON_UPLOAD\";\n  ALPHA_MODES[ALPHA_MODES[\"PREMULTIPLY_ALPHA\"] = 2] = \"PREMULTIPLY_ALPHA\";\n})(ALPHA_MODES || (ALPHA_MODES = {}));\n/**\n * Configure whether filter textures are cleared after binding.\n *\n * Filter textures need not be cleared if the filter does not use pixel blending. {@link CLEAR_MODES.BLIT} will detect\n * this and skip clearing as an optimization.\n *\n * @name CLEAR_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} BLEND - Do not clear the filter texture. The filter's output will blend on top of the output texture.\n * @property {number} CLEAR - Always clear the filter texture.\n * @property {number} BLIT - Clear only if {@link FilterSystem.forceClear} is set or if the filter uses pixel blending.\n * @property {number} NO - Alias for BLEND, same as `false` in earlier versions\n * @property {number} YES - Alias for CLEAR, same as `true` in earlier versions\n * @property {number} AUTO - Alias for BLIT\n */\n\n\nvar CLEAR_MODES;\n\n(function (CLEAR_MODES) {\n  CLEAR_MODES[CLEAR_MODES[\"NO\"] = 0] = \"NO\";\n  CLEAR_MODES[CLEAR_MODES[\"YES\"] = 1] = \"YES\";\n  CLEAR_MODES[CLEAR_MODES[\"AUTO\"] = 2] = \"AUTO\";\n  CLEAR_MODES[CLEAR_MODES[\"BLEND\"] = 0] = \"BLEND\";\n  CLEAR_MODES[CLEAR_MODES[\"CLEAR\"] = 1] = \"CLEAR\";\n  CLEAR_MODES[CLEAR_MODES[\"BLIT\"] = 2] = \"BLIT\";\n})(CLEAR_MODES || (CLEAR_MODES = {}));\n/**\n * The gc modes that are supported by pixi.\n *\n * The {@link PIXI.settings.GC_MODE} Garbage Collection mode for PixiJS textures is AUTO\n * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not\n * used for a specified period of time they will be removed from the GPU. They will of course\n * be uploaded again when they are required. This is a silent behind the scenes process that\n * should ensure that the GPU does not  get filled up.\n *\n * Handy for mobile devices!\n * This property only affects WebGL.\n *\n * @name GC_MODES\n * @enum {number}\n * @static\n * @memberof PIXI\n * @property {number} AUTO - Garbage collection will happen periodically automatically\n * @property {number} MANUAL - Garbage collection will need to be called manually\n */\n\n\nvar GC_MODES;\n\n(function (GC_MODES) {\n  GC_MODES[GC_MODES[\"AUTO\"] = 0] = \"AUTO\";\n  GC_MODES[GC_MODES[\"MANUAL\"] = 1] = \"MANUAL\";\n})(GC_MODES || (GC_MODES = {}));\n/**\n * Constants that specify float precision in shaders.\n *\n * @name PRECISION\n * @memberof PIXI\n * @constant\n * @static\n * @enum {string}\n * @property {string} LOW='lowp'\n * @property {string} MEDIUM='mediump'\n * @property {string} HIGH='highp'\n */\n\n\nvar PRECISION;\n\n(function (PRECISION) {\n  PRECISION[\"LOW\"] = \"lowp\";\n  PRECISION[\"MEDIUM\"] = \"mediump\";\n  PRECISION[\"HIGH\"] = \"highp\";\n})(PRECISION || (PRECISION = {}));\n/**\n * Constants for mask implementations.\n * We use `type` suffix because it leads to very different behaviours\n *\n * @name MASK_TYPES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NONE - Mask is ignored\n * @property {number} SCISSOR - Scissor mask, rectangle on screen, cheap\n * @property {number} STENCIL - Stencil mask, 1-bit, medium, works only if renderer supports stencil\n * @property {number} SPRITE - Mask that uses SpriteMaskFilter, uses temporary RenderTexture\n */\n\n\nvar MASK_TYPES;\n\n(function (MASK_TYPES) {\n  MASK_TYPES[MASK_TYPES[\"NONE\"] = 0] = \"NONE\";\n  MASK_TYPES[MASK_TYPES[\"SCISSOR\"] = 1] = \"SCISSOR\";\n  MASK_TYPES[MASK_TYPES[\"STENCIL\"] = 2] = \"STENCIL\";\n  MASK_TYPES[MASK_TYPES[\"SPRITE\"] = 3] = \"SPRITE\";\n})(MASK_TYPES || (MASK_TYPES = {}));\n/**\n * Constants for multi-sampling antialiasing.\n *\n * @see PIXI.Framebuffer#multisample\n *\n * @name MSAA_QUALITY\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NONE - No multisampling for this renderTexture\n * @property {number} LOW - Try 2 samples\n * @property {number} MEDIUM - Try 4 samples\n * @property {number} HIGH - Try 8 samples\n */\n\n\nvar MSAA_QUALITY;\n\n(function (MSAA_QUALITY) {\n  MSAA_QUALITY[MSAA_QUALITY[\"NONE\"] = 0] = \"NONE\";\n  MSAA_QUALITY[MSAA_QUALITY[\"LOW\"] = 2] = \"LOW\";\n  MSAA_QUALITY[MSAA_QUALITY[\"MEDIUM\"] = 4] = \"MEDIUM\";\n  MSAA_QUALITY[MSAA_QUALITY[\"HIGH\"] = 8] = \"HIGH\";\n})(MSAA_QUALITY || (MSAA_QUALITY = {}));\n/**\n * Constants for various buffer types in Pixi\n *\n * @see PIXI.BUFFER_TYPE\n *\n * @name BUFFER_TYPE\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} ELEMENT_ARRAY_BUFFER - buffer type for using as an index buffer\n * @property {number} ARRAY_BUFFER - buffer type for using attribute data\n * @property {number} UNIFORM_BUFFER - the buffer type is for uniform buffer objects\n */\n\n\nvar BUFFER_TYPE;\n\n(function (BUFFER_TYPE) {\n  BUFFER_TYPE[BUFFER_TYPE[\"ELEMENT_ARRAY_BUFFER\"] = 34963] = \"ELEMENT_ARRAY_BUFFER\";\n  BUFFER_TYPE[BUFFER_TYPE[\"ARRAY_BUFFER\"] = 34962] = \"ARRAY_BUFFER\"; // NOT YET SUPPORTED\n\n  BUFFER_TYPE[BUFFER_TYPE[\"UNIFORM_BUFFER\"] = 35345] = \"UNIFORM_BUFFER\";\n})(BUFFER_TYPE || (BUFFER_TYPE = {}));\n\nvar _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\nDisplayObject.prototype._cacheAsBitmapMultisample = MSAA_QUALITY.NONE; // figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n\n/**\n * @class\n * @ignore\n * @private\n */\n\nvar CacheData =\n/** @class */\nfunction () {\n  function CacheData() {\n    this.textureCacheId = null;\n    this.originalRender = null;\n    this.originalRenderCanvas = null;\n    this.originalCalculateBounds = null;\n    this.originalGetLocalBounds = null;\n    this.originalUpdateTransform = null;\n    this.originalDestroy = null;\n    this.originalMask = null;\n    this.originalFilterArea = null;\n    this.originalContainsPoint = null;\n    this.sprite = null;\n  }\n\n  return CacheData;\n}();\n\nObject.defineProperties(DisplayObject.prototype, {\n  /**\n   * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n   * but can be overriden for performance. Lower values will reduce memory usage at the expense\n   * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n   * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n   *\n   * @member {number} cacheAsBitmapResolution\n   * @memberof PIXI.DisplayObject#\n   * @default null\n   */\n  cacheAsBitmapResolution: {\n    get: function get() {\n      return this._cacheAsBitmapResolution;\n    },\n    set: function set(resolution) {\n      if (resolution === this._cacheAsBitmapResolution) {\n        return;\n      }\n\n      this._cacheAsBitmapResolution = resolution;\n\n      if (this.cacheAsBitmap) {\n        // Toggle to re-render at the new resolution\n        this.cacheAsBitmap = false;\n        this.cacheAsBitmap = true;\n      }\n    }\n  },\n\n  /**\n   * The number of samples to use for cacheAsBitmap. If set to `null`, the renderer's\n   * sample count is used.\n   * If `cacheAsBitmap` is set to `true`, this will re-render with the new number of samples.\n   *\n   * @member {number} cacheAsBitmapMultisample\n   * @memberof PIXI.DisplayObject#\n   * @default PIXI.MSAA_QUALITY.NONE\n   */\n  cacheAsBitmapMultisample: {\n    get: function get() {\n      return this._cacheAsBitmapMultisample;\n    },\n    set: function set(multisample) {\n      if (multisample === this._cacheAsBitmapMultisample) {\n        return;\n      }\n\n      this._cacheAsBitmapMultisample = multisample;\n\n      if (this.cacheAsBitmap) {\n        // Toggle to re-render with new multisample\n        this.cacheAsBitmap = false;\n        this.cacheAsBitmap = true;\n      }\n    }\n  },\n\n  /**\n   * Set this to true if you want this display object to be cached as a bitmap.\n   * This basically takes a snap shot of the display object as it is at that moment. It can\n   * provide a performance benefit for complex static displayObjects.\n   * To remove simply set this property to `false`\n   *\n   * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n   * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  cacheAsBitmap: {\n    get: function get() {\n      return this._cacheAsBitmap;\n    },\n    set: function set(value) {\n      if (this._cacheAsBitmap === value) {\n        return;\n      }\n\n      this._cacheAsBitmap = value;\n      var data;\n\n      if (value) {\n        if (!this._cacheData) {\n          this._cacheData = new CacheData();\n        }\n\n        data = this._cacheData;\n        data.originalRender = this.render;\n        data.originalRenderCanvas = this.renderCanvas;\n        data.originalUpdateTransform = this.updateTransform;\n        data.originalCalculateBounds = this.calculateBounds;\n        data.originalGetLocalBounds = this.getLocalBounds;\n        data.originalDestroy = this.destroy;\n        data.originalContainsPoint = this.containsPoint;\n        data.originalMask = this._mask;\n        data.originalFilterArea = this.filterArea;\n        this.render = this._renderCached;\n        this.renderCanvas = this._renderCachedCanvas;\n        this.destroy = this._cacheAsBitmapDestroy;\n      } else {\n        data = this._cacheData;\n\n        if (data.sprite) {\n          this._destroyCachedDisplayObject();\n        }\n\n        this.render = data.originalRender;\n        this.renderCanvas = data.originalRenderCanvas;\n        this.calculateBounds = data.originalCalculateBounds;\n        this.getLocalBounds = data.originalGetLocalBounds;\n        this.destroy = data.originalDestroy;\n        this.updateTransform = data.originalUpdateTransform;\n        this.containsPoint = data.originalContainsPoint;\n        this._mask = data.originalMask;\n        this.filterArea = data.originalFilterArea;\n      }\n    }\n  }\n});\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\n\nDisplayObject.prototype._renderCached = function _renderCached(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n\n  this._initCachedDisplayObject(renderer);\n\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n\n  this._cacheData.sprite._render(renderer);\n};\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\n\n\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer) {\n  var _a;\n\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  } // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n\n\n  var cacheAlpha = this.alpha;\n  this.alpha = 1; // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n\n  renderer.batch.flush(); // this.filters= [];\n  // next we find the dimensions of the untransformed object\n  // this function also calls updatetransform on all its children as part of the measuring.\n  // This means we don't need to update the transform again in this function\n  // TODO pass an object to clone too? saves having to create a new one each time!\n\n  var bounds = this.getLocalBounds(null, true).clone(); // add some padding!\n\n  if (this.filters) {\n    var padding = this.filters[0].padding;\n    bounds.pad(padding);\n  }\n\n  bounds.ceil(settings.RESOLUTION); // for now we cache the current renderTarget that the WebGL renderer is currently using.\n  // this could be more elegant..\n\n  var cachedRenderTexture = renderer.renderTexture.current;\n  var cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n  var cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n  var cachedProjectionTransform = renderer.projection.transform; // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n  // const stack = renderer.filterManager.filterStack;\n  // this renderTexture will be used to store the cached DisplayObject\n\n  var renderTexture = RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height,\n    resolution: this.cacheAsBitmapResolution || renderer.resolution,\n    multisample: (_a = this.cacheAsBitmapMultisample) !== null && _a !== void 0 ? _a : renderer.multisample\n  });\n  var textureCacheId = \"cacheAsBitmap_\" + uid();\n  this._cacheData.textureCacheId = textureCacheId;\n  BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  Texture.addToCache(renderTexture, textureCacheId); // need to set //\n\n  var m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y); // set all properties to there original so we can render to a texture\n\n  this.render = this._cacheData.originalRender;\n  renderer.render(this, {\n    renderTexture: renderTexture,\n    clear: true,\n    transform: m,\n    skipUpdateTransform: false\n  });\n  renderer.framebuffer.blit(); // now restore the state be setting the new properties\n\n  renderer.projection.transform = cachedProjectionTransform;\n  renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame); // renderer.filterManager.filterStack = stack;\n\n  this.render = this._renderCached; // the rest is the same as for Canvas\n\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  this.alpha = cacheAlpha; // create our cached sprite\n\n  var cachedSprite = new Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1; // restore the transform of the cached sprite to avoid the nasty flicker..\n\n  if (!this.parent) {\n    this.enableTempParent();\n    this.updateTransform();\n    this.disableTempParent(null);\n  } else {\n    this.updateTransform();\n  } // map the hit test..\n\n\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\n\n\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n\n  this._initCachedDisplayObjectCanvas(renderer);\n\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n\n  this._cacheData.sprite._renderCanvas(renderer);\n}; // TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\n\n\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer) {\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  } // get bounds actually transforms the object for us already!\n\n\n  var bounds = this.getLocalBounds(null, true);\n  var cacheAlpha = this.alpha;\n  this.alpha = 1;\n  var cachedRenderTarget = renderer.context;\n  var cachedProjectionTransform = renderer._projTransform;\n  bounds.ceil(settings.RESOLUTION);\n  var renderTexture = RenderTexture.create({\n    width: bounds.width,\n    height: bounds.height\n  });\n  var textureCacheId = \"cacheAsBitmap_\" + uid();\n  this._cacheData.textureCacheId = textureCacheId;\n  BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  Texture.addToCache(renderTexture, textureCacheId); // need to set //\n\n  var m = _tempMatrix;\n  this.transform.localTransform.copyTo(m);\n  m.invert();\n  m.tx -= bounds.x;\n  m.ty -= bounds.y; // m.append(this.transform.worldTransform.)\n  // set all properties to there original so we can render to a texture\n\n  this.renderCanvas = this._cacheData.originalRenderCanvas;\n  renderer.render(this, {\n    renderTexture: renderTexture,\n    clear: true,\n    transform: m,\n    skipUpdateTransform: false\n  }); // now restore the state be setting the new properties\n\n  renderer.context = cachedRenderTarget;\n  renderer._projTransform = cachedProjectionTransform;\n  this.renderCanvas = this._renderCachedCanvas; // the rest is the same as for WebGL\n\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null;\n  this.alpha = cacheAlpha; // create our cached sprite\n\n  var cachedSprite = new Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1; // restore the transform of the cached sprite to avoid the nasty flicker..\n\n  if (!this.parent) {\n    this.parent = renderer._tempDisplayObjectParent;\n    this.updateTransform();\n    this.parent = null;\n  } else {\n    this.updateTransform();\n  } // map the hit test..\n\n\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n * @method\n */\n\n\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds() {\n  this._bounds.clear();\n\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n\n  this._cacheData.sprite._calculateBounds();\n\n  this._bounds.updateID = this._boundsID;\n};\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @method\n * @return {Rectangle} The local bounds.\n */\n\n\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds() {\n  return this._cacheData.sprite.getLocalBounds(null);\n};\n/**\n * Destroys the cached sprite.\n *\n * @private\n * @method\n */\n\n\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject() {\n  this._cacheData.sprite._texture.destroy(true);\n\n  this._cacheData.sprite = null;\n  BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n  Texture.removeFromCache(this._cacheData.textureCacheId);\n  this._cacheData.textureCacheId = null;\n};\n/**\n * Destroys the cached object.\n *\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\n\n\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options) {\n  this.cacheAsBitmap = false;\n  this.destroy(options);\n};\n\nexport { CacheData };","map":{"version":3,"sources":["../../../constants/dist/esm/constants.js","../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * @pixi/constants - v6.1.3\n * Compiled Mon, 13 Sep 2021 15:29:31 UTC\n *\n * @pixi/constants is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n/**\n * Different types of environments for WebGL.\n *\n * @static\n * @memberof PIXI\n * @name ENV\n * @enum {number}\n * @property {number} WEBGL_LEGACY - Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility\n *  with older / less advanced devices. If you experience unexplained flickering prefer this environment.\n * @property {number} WEBGL - Version 1 of WebGL\n * @property {number} WEBGL2 - Version 2 of WebGL\n */\nvar ENV;\n(function (ENV) {\n    ENV[ENV[\"WEBGL_LEGACY\"] = 0] = \"WEBGL_LEGACY\";\n    ENV[ENV[\"WEBGL\"] = 1] = \"WEBGL\";\n    ENV[ENV[\"WEBGL2\"] = 2] = \"WEBGL2\";\n})(ENV || (ENV = {}));\n/**\n * Constant to identify the Renderer Type.\n *\n * @static\n * @memberof PIXI\n * @name RENDERER_TYPE\n * @enum {number}\n * @property {number} UNKNOWN - Unknown render type.\n * @property {number} WEBGL - WebGL render type.\n * @property {number} CANVAS - Canvas render type.\n */\nvar RENDERER_TYPE;\n(function (RENDERER_TYPE) {\n    RENDERER_TYPE[RENDERER_TYPE[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    RENDERER_TYPE[RENDERER_TYPE[\"WEBGL\"] = 1] = \"WEBGL\";\n    RENDERER_TYPE[RENDERER_TYPE[\"CANVAS\"] = 2] = \"CANVAS\";\n})(RENDERER_TYPE || (RENDERER_TYPE = {}));\n/**\n * Bitwise OR of masks that indicate the buffers to be cleared.\n *\n * @static\n * @memberof PIXI\n * @name BUFFER_BITS\n * @enum {number}\n * @property {number} COLOR - Indicates the buffers currently enabled for color writing.\n * @property {number} DEPTH - Indicates the depth buffer.\n * @property {number} STENCIL - Indicates the stencil buffer.\n */\nvar BUFFER_BITS;\n(function (BUFFER_BITS) {\n    BUFFER_BITS[BUFFER_BITS[\"COLOR\"] = 16384] = \"COLOR\";\n    BUFFER_BITS[BUFFER_BITS[\"DEPTH\"] = 256] = \"DEPTH\";\n    BUFFER_BITS[BUFFER_BITS[\"STENCIL\"] = 1024] = \"STENCIL\";\n})(BUFFER_BITS || (BUFFER_BITS = {}));\n/**\n * Various blend modes supported by PIXI.\n *\n * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.\n * Anything else will silently act like NORMAL.\n *\n * @memberof PIXI\n * @name BLEND_MODES\n * @enum {number}\n * @property {number} NORMAL\n * @property {number} ADD\n * @property {number} MULTIPLY\n * @property {number} SCREEN\n * @property {number} OVERLAY\n * @property {number} DARKEN\n * @property {number} LIGHTEN\n * @property {number} COLOR_DODGE\n * @property {number} COLOR_BURN\n * @property {number} HARD_LIGHT\n * @property {number} SOFT_LIGHT\n * @property {number} DIFFERENCE\n * @property {number} EXCLUSION\n * @property {number} HUE\n * @property {number} SATURATION\n * @property {number} COLOR\n * @property {number} LUMINOSITY\n * @property {number} NORMAL_NPM\n * @property {number} ADD_NPM\n * @property {number} SCREEN_NPM\n * @property {number} NONE\n * @property {number} SRC_IN\n * @property {number} SRC_OUT\n * @property {number} SRC_ATOP\n * @property {number} DST_OVER\n * @property {number} DST_IN\n * @property {number} DST_OUT\n * @property {number} DST_ATOP\n * @property {number} SUBTRACT\n * @property {number} SRC_OVER\n * @property {number} ERASE\n * @property {number} XOR\n */\nvar BLEND_MODES;\n(function (BLEND_MODES) {\n    BLEND_MODES[BLEND_MODES[\"NORMAL\"] = 0] = \"NORMAL\";\n    BLEND_MODES[BLEND_MODES[\"ADD\"] = 1] = \"ADD\";\n    BLEND_MODES[BLEND_MODES[\"MULTIPLY\"] = 2] = \"MULTIPLY\";\n    BLEND_MODES[BLEND_MODES[\"SCREEN\"] = 3] = \"SCREEN\";\n    BLEND_MODES[BLEND_MODES[\"OVERLAY\"] = 4] = \"OVERLAY\";\n    BLEND_MODES[BLEND_MODES[\"DARKEN\"] = 5] = \"DARKEN\";\n    BLEND_MODES[BLEND_MODES[\"LIGHTEN\"] = 6] = \"LIGHTEN\";\n    BLEND_MODES[BLEND_MODES[\"COLOR_DODGE\"] = 7] = \"COLOR_DODGE\";\n    BLEND_MODES[BLEND_MODES[\"COLOR_BURN\"] = 8] = \"COLOR_BURN\";\n    BLEND_MODES[BLEND_MODES[\"HARD_LIGHT\"] = 9] = \"HARD_LIGHT\";\n    BLEND_MODES[BLEND_MODES[\"SOFT_LIGHT\"] = 10] = \"SOFT_LIGHT\";\n    BLEND_MODES[BLEND_MODES[\"DIFFERENCE\"] = 11] = \"DIFFERENCE\";\n    BLEND_MODES[BLEND_MODES[\"EXCLUSION\"] = 12] = \"EXCLUSION\";\n    BLEND_MODES[BLEND_MODES[\"HUE\"] = 13] = \"HUE\";\n    BLEND_MODES[BLEND_MODES[\"SATURATION\"] = 14] = \"SATURATION\";\n    BLEND_MODES[BLEND_MODES[\"COLOR\"] = 15] = \"COLOR\";\n    BLEND_MODES[BLEND_MODES[\"LUMINOSITY\"] = 16] = \"LUMINOSITY\";\n    BLEND_MODES[BLEND_MODES[\"NORMAL_NPM\"] = 17] = \"NORMAL_NPM\";\n    BLEND_MODES[BLEND_MODES[\"ADD_NPM\"] = 18] = \"ADD_NPM\";\n    BLEND_MODES[BLEND_MODES[\"SCREEN_NPM\"] = 19] = \"SCREEN_NPM\";\n    BLEND_MODES[BLEND_MODES[\"NONE\"] = 20] = \"NONE\";\n    BLEND_MODES[BLEND_MODES[\"SRC_OVER\"] = 0] = \"SRC_OVER\";\n    BLEND_MODES[BLEND_MODES[\"SRC_IN\"] = 21] = \"SRC_IN\";\n    BLEND_MODES[BLEND_MODES[\"SRC_OUT\"] = 22] = \"SRC_OUT\";\n    BLEND_MODES[BLEND_MODES[\"SRC_ATOP\"] = 23] = \"SRC_ATOP\";\n    BLEND_MODES[BLEND_MODES[\"DST_OVER\"] = 24] = \"DST_OVER\";\n    BLEND_MODES[BLEND_MODES[\"DST_IN\"] = 25] = \"DST_IN\";\n    BLEND_MODES[BLEND_MODES[\"DST_OUT\"] = 26] = \"DST_OUT\";\n    BLEND_MODES[BLEND_MODES[\"DST_ATOP\"] = 27] = \"DST_ATOP\";\n    BLEND_MODES[BLEND_MODES[\"ERASE\"] = 26] = \"ERASE\";\n    BLEND_MODES[BLEND_MODES[\"SUBTRACT\"] = 28] = \"SUBTRACT\";\n    BLEND_MODES[BLEND_MODES[\"XOR\"] = 29] = \"XOR\";\n})(BLEND_MODES || (BLEND_MODES = {}));\n/**\n * Various webgl draw modes. These can be used to specify which GL drawMode to use\n * under certain situations and renderers.\n *\n * @memberof PIXI\n * @static\n * @name DRAW_MODES\n * @enum {number}\n * @property {number} POINTS\n * @property {number} LINES\n * @property {number} LINE_LOOP\n * @property {number} LINE_STRIP\n * @property {number} TRIANGLES\n * @property {number} TRIANGLE_STRIP\n * @property {number} TRIANGLE_FAN\n */\nvar DRAW_MODES;\n(function (DRAW_MODES) {\n    DRAW_MODES[DRAW_MODES[\"POINTS\"] = 0] = \"POINTS\";\n    DRAW_MODES[DRAW_MODES[\"LINES\"] = 1] = \"LINES\";\n    DRAW_MODES[DRAW_MODES[\"LINE_LOOP\"] = 2] = \"LINE_LOOP\";\n    DRAW_MODES[DRAW_MODES[\"LINE_STRIP\"] = 3] = \"LINE_STRIP\";\n    DRAW_MODES[DRAW_MODES[\"TRIANGLES\"] = 4] = \"TRIANGLES\";\n    DRAW_MODES[DRAW_MODES[\"TRIANGLE_STRIP\"] = 5] = \"TRIANGLE_STRIP\";\n    DRAW_MODES[DRAW_MODES[\"TRIANGLE_FAN\"] = 6] = \"TRIANGLE_FAN\";\n})(DRAW_MODES || (DRAW_MODES = {}));\n/**\n * Various GL texture/resources formats.\n *\n * @memberof PIXI\n * @static\n * @name FORMATS\n * @enum {number}\n * @property {number} RGBA=6408\n * @property {number} RGB=6407\n * @property {number} RG=33319\n * @property {number} RED=6403\n * @property {number} RGBA_INTEGER=36249\n * @property {number} RGB_INTEGER=36248\n * @property {number} RG_INTEGER=33320\n * @property {number} RED_INTEGER=36244\n * @property {number} ALPHA=6406\n * @property {number} LUMINANCE=6409\n * @property {number} LUMINANCE_ALPHA=6410\n * @property {number} DEPTH_COMPONENT=6402\n * @property {number} DEPTH_STENCIL=34041\n */\nvar FORMATS;\n(function (FORMATS) {\n    FORMATS[FORMATS[\"RGBA\"] = 6408] = \"RGBA\";\n    FORMATS[FORMATS[\"RGB\"] = 6407] = \"RGB\";\n    FORMATS[FORMATS[\"RG\"] = 33319] = \"RG\";\n    FORMATS[FORMATS[\"RED\"] = 6403] = \"RED\";\n    FORMATS[FORMATS[\"RGBA_INTEGER\"] = 36249] = \"RGBA_INTEGER\";\n    FORMATS[FORMATS[\"RGB_INTEGER\"] = 36248] = \"RGB_INTEGER\";\n    FORMATS[FORMATS[\"RG_INTEGER\"] = 33320] = \"RG_INTEGER\";\n    FORMATS[FORMATS[\"RED_INTEGER\"] = 36244] = \"RED_INTEGER\";\n    FORMATS[FORMATS[\"ALPHA\"] = 6406] = \"ALPHA\";\n    FORMATS[FORMATS[\"LUMINANCE\"] = 6409] = \"LUMINANCE\";\n    FORMATS[FORMATS[\"LUMINANCE_ALPHA\"] = 6410] = \"LUMINANCE_ALPHA\";\n    FORMATS[FORMATS[\"DEPTH_COMPONENT\"] = 6402] = \"DEPTH_COMPONENT\";\n    FORMATS[FORMATS[\"DEPTH_STENCIL\"] = 34041] = \"DEPTH_STENCIL\";\n})(FORMATS || (FORMATS = {}));\n/**\n * Various GL target types.\n *\n * @memberof PIXI\n * @static\n * @name TARGETS\n * @enum {number}\n * @property {number} TEXTURE_2D=3553\n * @property {number} TEXTURE_CUBE_MAP=34067\n * @property {number} TEXTURE_2D_ARRAY=35866\n * @property {number} TEXTURE_CUBE_MAP_POSITIVE_X=34069\n * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_X=34070\n * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Y=34071\n * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Y=34072\n * @property {number} TEXTURE_CUBE_MAP_POSITIVE_Z=34073\n * @property {number} TEXTURE_CUBE_MAP_NEGATIVE_Z=34074\n */\nvar TARGETS;\n(function (TARGETS) {\n    TARGETS[TARGETS[\"TEXTURE_2D\"] = 3553] = \"TEXTURE_2D\";\n    TARGETS[TARGETS[\"TEXTURE_CUBE_MAP\"] = 34067] = \"TEXTURE_CUBE_MAP\";\n    TARGETS[TARGETS[\"TEXTURE_2D_ARRAY\"] = 35866] = \"TEXTURE_2D_ARRAY\";\n    TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_POSITIVE_X\"] = 34069] = \"TEXTURE_CUBE_MAP_POSITIVE_X\";\n    TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_NEGATIVE_X\"] = 34070] = \"TEXTURE_CUBE_MAP_NEGATIVE_X\";\n    TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_POSITIVE_Y\"] = 34071] = \"TEXTURE_CUBE_MAP_POSITIVE_Y\";\n    TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_NEGATIVE_Y\"] = 34072] = \"TEXTURE_CUBE_MAP_NEGATIVE_Y\";\n    TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_POSITIVE_Z\"] = 34073] = \"TEXTURE_CUBE_MAP_POSITIVE_Z\";\n    TARGETS[TARGETS[\"TEXTURE_CUBE_MAP_NEGATIVE_Z\"] = 34074] = \"TEXTURE_CUBE_MAP_NEGATIVE_Z\";\n})(TARGETS || (TARGETS = {}));\n/**\n * Various GL data format types.\n *\n * @memberof PIXI\n * @static\n * @name TYPES\n * @enum {number}\n * @property {number} UNSIGNED_BYTE=5121\n * @property {number} UNSIGNED_SHORT=5123\n * @property {number} UNSIGNED_SHORT_5_6_5=33635\n * @property {number} UNSIGNED_SHORT_4_4_4_4=32819\n * @property {number} UNSIGNED_SHORT_5_5_5_1=32820\n * @property {number} UNSIGNED_INT=5125\n * @property {number} UNSIGNED_INT_10F_11F_11F_REV=35899\n * @property {number} UNSIGNED_INT_2_10_10_10_REV=33640\n * @property {number} UNSIGNED_INT_24_8=34042\n * @property {number} UNSIGNED_INT_5_9_9_9_REV=35902\n * @property {number} BYTE=5120\n * @property {number} SHORT=5122\n * @property {number} INT=5124\n * @property {number} FLOAT=5126\n * @property {number} FLOAT_32_UNSIGNED_INT_24_8_REV=36269\n * @property {number} HALF_FLOAT=36193\n */\nvar TYPES;\n(function (TYPES) {\n    TYPES[TYPES[\"UNSIGNED_BYTE\"] = 5121] = \"UNSIGNED_BYTE\";\n    TYPES[TYPES[\"UNSIGNED_SHORT\"] = 5123] = \"UNSIGNED_SHORT\";\n    TYPES[TYPES[\"UNSIGNED_SHORT_5_6_5\"] = 33635] = \"UNSIGNED_SHORT_5_6_5\";\n    TYPES[TYPES[\"UNSIGNED_SHORT_4_4_4_4\"] = 32819] = \"UNSIGNED_SHORT_4_4_4_4\";\n    TYPES[TYPES[\"UNSIGNED_SHORT_5_5_5_1\"] = 32820] = \"UNSIGNED_SHORT_5_5_5_1\";\n    TYPES[TYPES[\"UNSIGNED_INT\"] = 5125] = \"UNSIGNED_INT\";\n    TYPES[TYPES[\"UNSIGNED_INT_10F_11F_11F_REV\"] = 35899] = \"UNSIGNED_INT_10F_11F_11F_REV\";\n    TYPES[TYPES[\"UNSIGNED_INT_2_10_10_10_REV\"] = 33640] = \"UNSIGNED_INT_2_10_10_10_REV\";\n    TYPES[TYPES[\"UNSIGNED_INT_24_8\"] = 34042] = \"UNSIGNED_INT_24_8\";\n    TYPES[TYPES[\"UNSIGNED_INT_5_9_9_9_REV\"] = 35902] = \"UNSIGNED_INT_5_9_9_9_REV\";\n    TYPES[TYPES[\"BYTE\"] = 5120] = \"BYTE\";\n    TYPES[TYPES[\"SHORT\"] = 5122] = \"SHORT\";\n    TYPES[TYPES[\"INT\"] = 5124] = \"INT\";\n    TYPES[TYPES[\"FLOAT\"] = 5126] = \"FLOAT\";\n    TYPES[TYPES[\"FLOAT_32_UNSIGNED_INT_24_8_REV\"] = 36269] = \"FLOAT_32_UNSIGNED_INT_24_8_REV\";\n    TYPES[TYPES[\"HALF_FLOAT\"] = 36193] = \"HALF_FLOAT\";\n})(TYPES || (TYPES = {}));\n/**\n * Various sampler types. Correspond to `sampler`, `isampler`, `usampler` GLSL types respectively.\n * WebGL1 works only with FLOAT.\n *\n * @memberof PIXI\n * @static\n * @name SAMPLER_TYPES\n * @enum {number}\n * @property {number} FLOAT=0\n * @property {number} INT=1\n * @property {number} UINT=2\n */\nvar SAMPLER_TYPES;\n(function (SAMPLER_TYPES) {\n    SAMPLER_TYPES[SAMPLER_TYPES[\"FLOAT\"] = 0] = \"FLOAT\";\n    SAMPLER_TYPES[SAMPLER_TYPES[\"INT\"] = 1] = \"INT\";\n    SAMPLER_TYPES[SAMPLER_TYPES[\"UINT\"] = 2] = \"UINT\";\n})(SAMPLER_TYPES || (SAMPLER_TYPES = {}));\n/**\n * The scale modes that are supported by pixi.\n *\n * The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.\n * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.\n *\n * @memberof PIXI\n * @static\n * @name SCALE_MODES\n * @enum {number}\n * @property {number} LINEAR Smooth scaling\n * @property {number} NEAREST Pixelating scaling\n */\nvar SCALE_MODES;\n(function (SCALE_MODES) {\n    SCALE_MODES[SCALE_MODES[\"NEAREST\"] = 0] = \"NEAREST\";\n    SCALE_MODES[SCALE_MODES[\"LINEAR\"] = 1] = \"LINEAR\";\n})(SCALE_MODES || (SCALE_MODES = {}));\n/**\n * The wrap modes that are supported by pixi.\n *\n * The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.\n * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.\n * If the texture is non power of two then clamp will be used regardless as WebGL can\n * only use REPEAT if the texture is po2.\n *\n * This property only affects WebGL.\n *\n * @name WRAP_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} CLAMP - The textures uvs are clamped\n * @property {number} REPEAT - The texture uvs tile and repeat\n * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring\n */\nvar WRAP_MODES;\n(function (WRAP_MODES) {\n    WRAP_MODES[WRAP_MODES[\"CLAMP\"] = 33071] = \"CLAMP\";\n    WRAP_MODES[WRAP_MODES[\"REPEAT\"] = 10497] = \"REPEAT\";\n    WRAP_MODES[WRAP_MODES[\"MIRRORED_REPEAT\"] = 33648] = \"MIRRORED_REPEAT\";\n})(WRAP_MODES || (WRAP_MODES = {}));\n/**\n * Mipmap filtering modes that are supported by pixi.\n *\n * The {@link PIXI.settings.MIPMAP_TEXTURES} affects default texture filtering.\n * Mipmaps are generated for a baseTexture if its `mipmap` field is `ON`,\n * or its `POW2` and texture dimensions are powers of 2.\n * Due to platform restriction, `ON` option will work like `POW2` for webgl-1.\n *\n * This property only affects WebGL.\n *\n * @name MIPMAP_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} OFF - No mipmaps\n * @property {number} POW2 - Generate mipmaps if texture dimensions are pow2\n * @property {number} ON - Always generate mipmaps\n * @property {number} ON_MANUAL - Use mipmaps, but do not auto-generate them; this is used with a resource\n *   that supports buffering each level-of-detail.\n */\nvar MIPMAP_MODES;\n(function (MIPMAP_MODES) {\n    MIPMAP_MODES[MIPMAP_MODES[\"OFF\"] = 0] = \"OFF\";\n    MIPMAP_MODES[MIPMAP_MODES[\"POW2\"] = 1] = \"POW2\";\n    MIPMAP_MODES[MIPMAP_MODES[\"ON\"] = 2] = \"ON\";\n    MIPMAP_MODES[MIPMAP_MODES[\"ON_MANUAL\"] = 3] = \"ON_MANUAL\";\n})(MIPMAP_MODES || (MIPMAP_MODES = {}));\n/**\n * How to treat textures with premultiplied alpha\n *\n * @name ALPHA_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NO_PREMULTIPLIED_ALPHA - Source is not premultiplied, leave it like that.\n *  Option for compressed and data textures that are created from typed arrays.\n * @property {number} PREMULTIPLY_ON_UPLOAD - Source is not premultiplied, premultiply on upload.\n *  Default option, used for all loaded images.\n * @property {number} PREMULTIPLIED_ALPHA - Source is already premultiplied\n *  Example: spine atlases with `_pma` suffix.\n * @property {number} NPM - Alias for NO_PREMULTIPLIED_ALPHA.\n * @property {number} UNPACK - Default option, alias for PREMULTIPLY_ON_UPLOAD.\n * @property {number} PMA - Alias for PREMULTIPLIED_ALPHA.\n */\nvar ALPHA_MODES;\n(function (ALPHA_MODES) {\n    ALPHA_MODES[ALPHA_MODES[\"NPM\"] = 0] = \"NPM\";\n    ALPHA_MODES[ALPHA_MODES[\"UNPACK\"] = 1] = \"UNPACK\";\n    ALPHA_MODES[ALPHA_MODES[\"PMA\"] = 2] = \"PMA\";\n    ALPHA_MODES[ALPHA_MODES[\"NO_PREMULTIPLIED_ALPHA\"] = 0] = \"NO_PREMULTIPLIED_ALPHA\";\n    ALPHA_MODES[ALPHA_MODES[\"PREMULTIPLY_ON_UPLOAD\"] = 1] = \"PREMULTIPLY_ON_UPLOAD\";\n    ALPHA_MODES[ALPHA_MODES[\"PREMULTIPLY_ALPHA\"] = 2] = \"PREMULTIPLY_ALPHA\";\n})(ALPHA_MODES || (ALPHA_MODES = {}));\n/**\n * Configure whether filter textures are cleared after binding.\n *\n * Filter textures need not be cleared if the filter does not use pixel blending. {@link CLEAR_MODES.BLIT} will detect\n * this and skip clearing as an optimization.\n *\n * @name CLEAR_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} BLEND - Do not clear the filter texture. The filter's output will blend on top of the output texture.\n * @property {number} CLEAR - Always clear the filter texture.\n * @property {number} BLIT - Clear only if {@link FilterSystem.forceClear} is set or if the filter uses pixel blending.\n * @property {number} NO - Alias for BLEND, same as `false` in earlier versions\n * @property {number} YES - Alias for CLEAR, same as `true` in earlier versions\n * @property {number} AUTO - Alias for BLIT\n */\nvar CLEAR_MODES;\n(function (CLEAR_MODES) {\n    CLEAR_MODES[CLEAR_MODES[\"NO\"] = 0] = \"NO\";\n    CLEAR_MODES[CLEAR_MODES[\"YES\"] = 1] = \"YES\";\n    CLEAR_MODES[CLEAR_MODES[\"AUTO\"] = 2] = \"AUTO\";\n    CLEAR_MODES[CLEAR_MODES[\"BLEND\"] = 0] = \"BLEND\";\n    CLEAR_MODES[CLEAR_MODES[\"CLEAR\"] = 1] = \"CLEAR\";\n    CLEAR_MODES[CLEAR_MODES[\"BLIT\"] = 2] = \"BLIT\";\n})(CLEAR_MODES || (CLEAR_MODES = {}));\n/**\n * The gc modes that are supported by pixi.\n *\n * The {@link PIXI.settings.GC_MODE} Garbage Collection mode for PixiJS textures is AUTO\n * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not\n * used for a specified period of time they will be removed from the GPU. They will of course\n * be uploaded again when they are required. This is a silent behind the scenes process that\n * should ensure that the GPU does not  get filled up.\n *\n * Handy for mobile devices!\n * This property only affects WebGL.\n *\n * @name GC_MODES\n * @enum {number}\n * @static\n * @memberof PIXI\n * @property {number} AUTO - Garbage collection will happen periodically automatically\n * @property {number} MANUAL - Garbage collection will need to be called manually\n */\nvar GC_MODES;\n(function (GC_MODES) {\n    GC_MODES[GC_MODES[\"AUTO\"] = 0] = \"AUTO\";\n    GC_MODES[GC_MODES[\"MANUAL\"] = 1] = \"MANUAL\";\n})(GC_MODES || (GC_MODES = {}));\n/**\n * Constants that specify float precision in shaders.\n *\n * @name PRECISION\n * @memberof PIXI\n * @constant\n * @static\n * @enum {string}\n * @property {string} LOW='lowp'\n * @property {string} MEDIUM='mediump'\n * @property {string} HIGH='highp'\n */\nvar PRECISION;\n(function (PRECISION) {\n    PRECISION[\"LOW\"] = \"lowp\";\n    PRECISION[\"MEDIUM\"] = \"mediump\";\n    PRECISION[\"HIGH\"] = \"highp\";\n})(PRECISION || (PRECISION = {}));\n/**\n * Constants for mask implementations.\n * We use `type` suffix because it leads to very different behaviours\n *\n * @name MASK_TYPES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NONE - Mask is ignored\n * @property {number} SCISSOR - Scissor mask, rectangle on screen, cheap\n * @property {number} STENCIL - Stencil mask, 1-bit, medium, works only if renderer supports stencil\n * @property {number} SPRITE - Mask that uses SpriteMaskFilter, uses temporary RenderTexture\n */\nvar MASK_TYPES;\n(function (MASK_TYPES) {\n    MASK_TYPES[MASK_TYPES[\"NONE\"] = 0] = \"NONE\";\n    MASK_TYPES[MASK_TYPES[\"SCISSOR\"] = 1] = \"SCISSOR\";\n    MASK_TYPES[MASK_TYPES[\"STENCIL\"] = 2] = \"STENCIL\";\n    MASK_TYPES[MASK_TYPES[\"SPRITE\"] = 3] = \"SPRITE\";\n})(MASK_TYPES || (MASK_TYPES = {}));\n/**\n * Constants for multi-sampling antialiasing.\n *\n * @see PIXI.Framebuffer#multisample\n *\n * @name MSAA_QUALITY\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NONE - No multisampling for this renderTexture\n * @property {number} LOW - Try 2 samples\n * @property {number} MEDIUM - Try 4 samples\n * @property {number} HIGH - Try 8 samples\n */\nvar MSAA_QUALITY;\n(function (MSAA_QUALITY) {\n    MSAA_QUALITY[MSAA_QUALITY[\"NONE\"] = 0] = \"NONE\";\n    MSAA_QUALITY[MSAA_QUALITY[\"LOW\"] = 2] = \"LOW\";\n    MSAA_QUALITY[MSAA_QUALITY[\"MEDIUM\"] = 4] = \"MEDIUM\";\n    MSAA_QUALITY[MSAA_QUALITY[\"HIGH\"] = 8] = \"HIGH\";\n})(MSAA_QUALITY || (MSAA_QUALITY = {}));\n/**\n * Constants for various buffer types in Pixi\n *\n * @see PIXI.BUFFER_TYPE\n *\n * @name BUFFER_TYPE\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} ELEMENT_ARRAY_BUFFER - buffer type for using as an index buffer\n * @property {number} ARRAY_BUFFER - buffer type for using attribute data\n * @property {number} UNIFORM_BUFFER - the buffer type is for uniform buffer objects\n */\nvar BUFFER_TYPE;\n(function (BUFFER_TYPE) {\n    BUFFER_TYPE[BUFFER_TYPE[\"ELEMENT_ARRAY_BUFFER\"] = 34963] = \"ELEMENT_ARRAY_BUFFER\";\n    BUFFER_TYPE[BUFFER_TYPE[\"ARRAY_BUFFER\"] = 34962] = \"ARRAY_BUFFER\";\n    // NOT YET SUPPORTED\n    BUFFER_TYPE[BUFFER_TYPE[\"UNIFORM_BUFFER\"] = 35345] = \"UNIFORM_BUFFER\";\n})(BUFFER_TYPE || (BUFFER_TYPE = {}));\n\nexport { ALPHA_MODES, BLEND_MODES, BUFFER_BITS, BUFFER_TYPE, CLEAR_MODES, DRAW_MODES, ENV, FORMATS, GC_MODES, MASK_TYPES, MIPMAP_MODES, MSAA_QUALITY, PRECISION, RENDERER_TYPE, SAMPLER_TYPES, SCALE_MODES, TARGETS, TYPES, WRAP_MODES };\n//# sourceMappingURL=constants.js.map\n","import { Texture, BaseTexture, RenderTexture, Renderer, MaskData, AbstractRenderer } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { Container, DisplayObject, IDestroyOptions } from '@pixi/display';\nimport { IPointData, Matrix, Rectangle } from '@pixi/math';\nimport { uid } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\nimport { MSAA_QUALITY } from '@pixi/constants';\n\n// Don't import CanvasRender to remove dependency on this optional package\n// this type should satisify these requirements for cacheAsBitmap types\ninterface CanvasRenderer extends AbstractRenderer {\n    context: CanvasRenderingContext2D;\n}\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = null;\nDisplayObject.prototype._cacheAsBitmapResolution = null;\nDisplayObject.prototype._cacheAsBitmapMultisample = MSAA_QUALITY.NONE;\n\n// figured there's no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n * @private\n */\nexport class CacheData\n{\n    public textureCacheId: string;\n    public originalRender: (renderer: Renderer) => void;\n    public originalRenderCanvas: (renderer: AbstractRenderer) => void;\n    public originalCalculateBounds: () => void;\n    public originalGetLocalBounds: (rect?: Rectangle) => Rectangle;\n    public originalUpdateTransform: () => void;\n    public originalDestroy: (options?: IDestroyOptions|boolean) => void;\n    public originalMask: Container|MaskData;\n    public originalFilterArea: Rectangle;\n    public originalContainsPoint: (point: IPointData) => boolean;\n    public sprite: Sprite;\n\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.originalContainsPoint = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * The resolution to use for cacheAsBitmap. By default this will use the renderer's resolution\n     * but can be overriden for performance. Lower values will reduce memory usage at the expense\n     * of render quality. A falsey value of `null` or `0` will default to the renderer's resolution.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new resolution.\n     *\n     * @member {number} cacheAsBitmapResolution\n     * @memberof PIXI.DisplayObject#\n     * @default null\n     */\n    cacheAsBitmapResolution: {\n        get(): number\n        {\n            return this._cacheAsBitmapResolution;\n        },\n        set(resolution: number): void\n        {\n            if (resolution === this._cacheAsBitmapResolution)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapResolution = resolution;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render at the new resolution\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * The number of samples to use for cacheAsBitmap. If set to `null`, the renderer's\n     * sample count is used.\n     * If `cacheAsBitmap` is set to `true`, this will re-render with the new number of samples.\n     *\n     * @member {number} cacheAsBitmapMultisample\n     * @memberof PIXI.DisplayObject#\n     * @default PIXI.MSAA_QUALITY.NONE\n     */\n    cacheAsBitmapMultisample: {\n        get(): MSAA_QUALITY\n        {\n            return this._cacheAsBitmapMultisample;\n        },\n        set(multisample: MSAA_QUALITY): void\n        {\n            if (multisample === this._cacheAsBitmapMultisample)\n            {\n                return;\n            }\n\n            this._cacheAsBitmapMultisample = multisample;\n\n            if (this.cacheAsBitmap)\n            {\n                // Toggle to re-render with new multisample\n                this.cacheAsBitmap = false;\n                this.cacheAsBitmap = true;\n            }\n        },\n    },\n\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get(): CacheData\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value: CacheData): void\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data: CacheData;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @method _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer: Renderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @method _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer: Renderer): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = (this as Container).getLocalBounds(null, true).clone();\n\n    // add some padding!\n    if (this.filters)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame.clone();\n    const cachedDestinationFrame = renderer.renderTexture.destinationFrame.clone();\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create({\n        width: bounds.width,\n        height: bounds.height,\n        resolution: this.cacheAsBitmapResolution || renderer.resolution,\n        multisample: this.cacheAsBitmapMultisample ?? renderer.multisample,\n    });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = this.transform.localTransform.copyTo(_tempMatrix).invert().translate(-bounds.x, -bounds.y);\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    renderer.framebuffer.blit();\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame, cachedDestinationFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.enableTempParent();\n        this.updateTransform();\n        this.disableTempParent(null);\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @method _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer: AbstractRenderer): void\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    (this._cacheData.sprite as any)._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @method _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.CanvasRenderer} renderer - The canvas renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(\n    renderer: CanvasRenderer\n): void\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = (this as Container).getLocalBounds(null, true);\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.context;\n    const cachedProjectionTransform = (renderer as any)._projTransform;\n\n    bounds.ceil(settings.RESOLUTION);\n\n    const renderTexture = RenderTexture.create({ width: bounds.width, height: bounds.height });\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    renderer.render(this, { renderTexture, clear: true, transform: m, skipUpdateTransform: false });\n    // now restore the state be setting the new properties\n    renderer.context = cachedRenderTarget;\n    (renderer as any)._projTransform = cachedProjectionTransform;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n    this.alpha = cacheAlpha;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = (renderer as any)._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    (this as Sprite).containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n * @method\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds(): void\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    (this._cacheData.sprite as any)._calculateBounds();\n    this._bounds.updateID = (this as any)._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @method\n * @return {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds(): Rectangle\n{\n    return this._cacheData.sprite.getLocalBounds(null);\n};\n\n/**\n * Destroys the cached sprite.\n *\n * @private\n * @method\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject(): void\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n *\n * @private\n * @method\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options?: IDestroyOptions|boolean): void\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n"]},"metadata":{},"sourceType":"module"}