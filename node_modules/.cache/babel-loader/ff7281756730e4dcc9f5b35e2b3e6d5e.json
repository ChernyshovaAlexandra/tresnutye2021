{"ast":null,"code":"import _classCallCheck from \"/Users/alexandrach/Projects/tresnutye2021/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alexandrach/Projects/tresnutye2021/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/alexandrach/Projects/tresnutye2021/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"/Users/alexandrach/Projects/tresnutye2021/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/alexandrach/Projects/tresnutye2021/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ImageHelper from './ImageHelper';\nvar propTypes = {\n  // Rendered on success\n  children: PropTypes.element.isRequired,\n  // Rendered during load\n  loadingIndicator: PropTypes.node,\n  // Array of image urls to be preloaded\n  images: PropTypes.arrayOf(PropTypes.string),\n  // If set, the preloader will automatically show\n  // the children content after this amount of time\n  autoResolveDelay: PropTypes.number,\n  // Error callback. Is passed the error\n  onError: PropTypes.func,\n  // Success callback\n  onSuccess: PropTypes.func,\n  // Whether or not we should still show the content\n  // even if there is a preloading error\n  resolveOnError: PropTypes.bool,\n  // Whether or not we should mount the child content after\n  // images have finished loading (or after autoResolveDelay)\n  mountChildren: PropTypes.bool\n};\nvar defaultProps = {\n  loadingIndicator: null,\n  images: [],\n  autoResolveDelay: 0,\n  onError: null,\n  onSuccess: null,\n  resolveOnError: true,\n  mountChildren: true\n};\n\nvar Preload = /*#__PURE__*/function (_React$Component) {\n  _inherits(Preload, _React$Component);\n\n  var _super = _createSuper(Preload);\n\n  function Preload() {\n    var _this;\n\n    _classCallCheck(this, Preload);\n\n    var _temp;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _possibleConstructorReturn(_this, (_temp = _this = _super.call.apply(_super, [this].concat(args)), _this._mounted = false, _this.state = {\n      ready: false\n    }, _this.loadImages = function () {\n      var _this$props = _this.props,\n          images = _this$props.images,\n          autoResolveDelay = _this$props.autoResolveDelay;\n      ImageHelper.loadImages(images).then(_this._handleSuccess, _this._handleError);\n\n      if (autoResolveDelay && autoResolveDelay > 0) {\n        _this.autoResolveTimeout = setTimeout(_this._handleAutoResolve, autoResolveDelay);\n      }\n    }, _this._handleAutoResolve = function () {\n      _this._handleSuccess({\n        didAutoResolve: true\n      });\n    }, _this._handleSuccess = function () {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          didError = _ref.didError,\n          didAutoResolve = _ref.didAutoResolve;\n\n      if (_this.autoResolveTimeout) {\n        clearTimeout(_this.autoResolveTimeout);\n        _this.autoResolveTimeout = null;\n      }\n\n      var ready = _this.state.ready;\n\n      if (ready || !_this._mounted) {\n        return;\n      }\n\n      _this.setState({\n        ready: true\n      });\n\n      var onSuccess = _this.props.onSuccess;\n\n      if (onSuccess) {\n        onSuccess({\n          didError: didError,\n          didAutoResolve: didAutoResolve\n        });\n      }\n    }, _this._handleError = function (err) {\n      if (!_this._mounted) {\n        return;\n      }\n\n      var _this$props2 = _this.props,\n          resolveOnError = _this$props2.resolveOnError,\n          onError = _this$props2.onError;\n\n      if (resolveOnError) {\n        _this._handleSuccess({\n          didError: true,\n          error: err\n        });\n      }\n\n      if (onError) {\n        onError(err);\n      }\n    }, _temp));\n  }\n\n  _createClass(Preload, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var images = this.props.images;\n\n      if (!images || images.length === 0) {\n        this._handleSuccess();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._mounted = true;\n      this.loadImages();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var images = this.props.images;\n      var oldImages = new Set(prevProps.images);\n      var hasChanged = false;\n\n      for (var i = 0; i < images.length; i += 1) {\n        var image = images[i];\n\n        if (!oldImages.has(image)) {\n          hasChanged = true;\n          break;\n        }\n      }\n\n      if (hasChanged) {\n        this.loadImages();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._mounted = false;\n\n      if (this.autoResolveTimeout) {\n        clearTimeout(this.autoResolveTimeout);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var ready = this.state.ready;\n      var _this$props3 = this.props,\n          mountChildren = _this$props3.mountChildren,\n          children = _this$props3.children,\n          loadingIndicator = _this$props3.loadingIndicator;\n      return ready && mountChildren ? children : loadingIndicator;\n    }\n  }]);\n\n  return Preload;\n}(React.Component);\n\nPreload.propTypes = propTypes;\nPreload.defaultProps = defaultProps;\nexport default Preload;","map":{"version":3,"sources":["/Users/alexandrach/Projects/tresnutye2021/node_modules/react-preload/lib/Preload.js"],"names":["React","PropTypes","ImageHelper","propTypes","children","element","isRequired","loadingIndicator","node","images","arrayOf","string","autoResolveDelay","number","onError","func","onSuccess","resolveOnError","bool","mountChildren","defaultProps","Preload","_temp","args","_mounted","state","ready","loadImages","props","then","_handleSuccess","_handleError","autoResolveTimeout","setTimeout","_handleAutoResolve","didAutoResolve","didError","clearTimeout","setState","err","error","length","prevProps","oldImages","Set","hasChanged","i","image","has","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImageHelper from './ImageHelper';\n\nconst propTypes = {\n    // Rendered on success\n    children: PropTypes.element.isRequired,\n\n    // Rendered during load\n    loadingIndicator: PropTypes.node,\n\n    // Array of image urls to be preloaded\n    images: PropTypes.arrayOf(PropTypes.string),\n\n    // If set, the preloader will automatically show\n    // the children content after this amount of time\n    autoResolveDelay: PropTypes.number,\n\n    // Error callback. Is passed the error\n    onError: PropTypes.func,\n\n    // Success callback\n    onSuccess: PropTypes.func,\n\n    // Whether or not we should still show the content\n    // even if there is a preloading error\n    resolveOnError: PropTypes.bool,\n\n    // Whether or not we should mount the child content after\n    // images have finished loading (or after autoResolveDelay)\n    mountChildren: PropTypes.bool\n};\n\nconst defaultProps = {\n    loadingIndicator: null,\n    images: [],\n    autoResolveDelay: 0,\n    onError: null,\n    onSuccess: null,\n    resolveOnError: true,\n    mountChildren: true\n};\n\nclass Preload extends React.Component {\n    constructor(...args) {\n        var _temp;\n\n        return _temp = super(...args), this._mounted = false, this.state = {\n            ready: false\n        }, this.loadImages = () => {\n            const { images, autoResolveDelay } = this.props;\n            ImageHelper.loadImages(images).then(this._handleSuccess, this._handleError);\n\n            if (autoResolveDelay && autoResolveDelay > 0) {\n                this.autoResolveTimeout = setTimeout(this._handleAutoResolve, autoResolveDelay);\n            }\n        }, this._handleAutoResolve = () => {\n            this._handleSuccess({ didAutoResolve: true });\n        }, this._handleSuccess = ({ didError, didAutoResolve } = {}) => {\n            if (this.autoResolveTimeout) {\n                clearTimeout(this.autoResolveTimeout);\n                this.autoResolveTimeout = null;\n            }\n\n            const { ready } = this.state;\n            if (ready || !this._mounted) {\n                return;\n            }\n\n            this.setState({\n                ready: true\n            });\n\n            const { onSuccess } = this.props;\n            if (onSuccess) {\n                onSuccess({ didError, didAutoResolve });\n            }\n        }, this._handleError = err => {\n            if (!this._mounted) {\n                return;\n            }\n\n            const { resolveOnError, onError } = this.props;\n\n            if (resolveOnError) {\n                this._handleSuccess({ didError: true, error: err });\n            }\n\n            if (onError) {\n                onError(err);\n            }\n        }, _temp;\n    }\n\n    componentWillMount() {\n        const { images } = this.props;\n        if (!images || images.length === 0) {\n            this._handleSuccess();\n        }\n    }\n\n    componentDidMount() {\n        this._mounted = true;\n        this.loadImages();\n    }\n\n    componentDidUpdate(prevProps) {\n        const { images } = this.props;\n        const oldImages = new Set(prevProps.images);\n\n        let hasChanged = false;\n        for (let i = 0; i < images.length; i += 1) {\n            const image = images[i];\n            if (!oldImages.has(image)) {\n                hasChanged = true;\n                break;\n            }\n        }\n\n        if (hasChanged) {\n            this.loadImages();\n        }\n    }\n\n    componentWillUnmount() {\n        this._mounted = false;\n        if (this.autoResolveTimeout) {\n            clearTimeout(this.autoResolveTimeout);\n        }\n    }\n\n    render() {\n        const { ready } = this.state;\n        const { mountChildren, children, loadingIndicator } = this.props;\n\n        return ready && mountChildren ? children : loadingIndicator;\n    }\n}\n\nPreload.propTypes = propTypes;\nPreload.defaultProps = defaultProps;\n\nexport default Preload;"]},"metadata":{},"sourceType":"module"}